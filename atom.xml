<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mrluo</title>
  <subtitle>o or 1 ?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-13T10:13:05.691Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mrluo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js变量对象</title>
    <link href="http://yoursite.com/2016/04/12/js%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/04/12/js变量对象/</id>
    <published>2016-04-12T10:16:54.000Z</published>
    <updated>2016-04-13T10:13:05.691Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本篇说的变量对象，指的是在js解释器层是如何对我们定义的变量，进行操作管理的。&lt;br&gt;并不是我们编写程序时var a ={‘name’:123}的变量对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本篇说的变量对象，指的是在js解释器层是如何对我们定义的变量，进行操作管理的。&lt;br&gt;并不是我们编写程序时var a ={‘name’:12
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="js深入系列" scheme="http://yoursite.com/tags/js%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97/"/>
    
      <category term="js变量对象" scheme="http://yoursite.com/tags/js%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>js执行上下文[Execution Context]</title>
    <link href="http://yoursite.com/2016/04/12/js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-Execution-Context/"/>
    <id>http://yoursite.com/2016/04/12/js执行上下文-Execution-Context/</id>
    <published>2016-04-12T07:44:30.000Z</published>
    <updated>2016-04-13T10:13:55.696Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本篇记录在JavaScript中代码的运行环境，也就是执行上下文概念,清楚javascript引擎内部在执行代码前做了些什么，解释为什么某些函数以及变量在没有被声明就可以被使用。&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b); &lt;span class=&quot;comment&quot;&gt;// function b()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(d); &lt;span class=&quot;comment&quot;&gt;// 异常：d is no defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;执行上下文-execution-context-分类&quot;&gt;&lt;a href=&quot;#执行上下文-execution-context-分类&quot; class=&quot;headerlink&quot; title=&quot;执行上下文(execution context)分类&quot;&gt;&lt;/a&gt;执行上下文(execution context)分类&lt;/h3&gt;&lt;p&gt;可执行上下文（简称EC）是一个抽象的概念，在ECMA262中用他来区分不同类型的可执行代码。&lt;br&gt;首先需要分清楚的是在js中，有以下不同类型的可执行上下文：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局代码&lt;/strong&gt;：这类的代码是在&lt;code&gt;程序&lt;/code&gt;级别上被处理的，例如加载的外部js代码或者是内联的js代码（script标签内的代码块）,全局代码不包括任何函数体内的js代码。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数代码&lt;/strong&gt;：当执行一个函数时，运行函数体中的代码（这里不包括函数内部的函数）。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eval执行的代码&lt;/strong&gt;：使用内部函数eval执行的时候。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;换个角度说就是js解释器在执行js code时候的执行的环境.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面来看一个代码片段：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; globalStr=&lt;span class=&quot;string&quot;&gt;&#39;hi&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;my name is &#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		last=&lt;span class=&quot;string&quot;&gt;&#39;luo&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getStr&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&amp;#125;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getLast&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&amp;#125;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; last;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(globalStr+&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;+getStr()+&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;+ getLast());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码块一共有4个不同的执行上下文&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test函数的外层的&lt;code&gt;全局上下文&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;test函数内部代码 的&lt;code&gt;执行上下文&lt;/code&gt;(函数类型的EC)&lt;/li&gt;
&lt;li&gt;getStr函数内部代码 的&lt;code&gt;执行上下文&lt;/code&gt;(函数类型的EC)&lt;/li&gt;
&lt;li&gt;getLast函数内部代码 的&lt;code&gt;执行上下文&lt;/code&gt;(函数类型的EC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;code&gt;全局上下文&lt;/code&gt;只会有一个，其他函数的上下文（或者是eval的上下文）可以有多个.&lt;/p&gt;
&lt;h3 id=&quot;执行上下文-execution-context-操作&quot;&gt;&lt;a href=&quot;#执行上下文-execution-context-操作&quot; class=&quot;headerlink&quot; title=&quot;执行上下文(execution context)操作&quot;&gt;&lt;/a&gt;执行上下文(execution context)操作&lt;/h3&gt;&lt;p&gt;分析完了上下文的类型，我们来看看在内部是怎么对这些上下文进行管理操作的。&lt;br&gt;首先我们需要知道，js的解释器在浏览器中是&lt;code&gt;单线程&lt;/code&gt;运行的，也就是说在一个时间内只能&lt;code&gt;同时&lt;/code&gt;进行一个事件的处理，其他的事件会被加入到一个序列内，我们叫它&lt;code&gt;执行上下文的堆栈&lt;/code&gt;.   大概的模拟是这样的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ECStack = [];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们接着拿上面的代码来说，在程序初始的时候我们的堆栈是这样的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ECStack = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	globalContext &lt;span class=&quot;comment&quot;&gt;/*存储的是上面分析的第一个（test函数外层）上下文*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;执行&lt;/code&gt;test()的时候，会把这个函数的EC(这里简写)加入到堆栈内:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意这里是执行的时候才创建一个执行上下文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ECStack = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testFunContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	globalContext &lt;span class=&quot;comment&quot;&gt;/*存储的是上面分析的第一个（test函数外层）上下文*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后逐步的加入剩下2个内部函数的EC到这个堆栈中,最终堆栈是：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ECStack = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testinner2FunContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testinner1FunContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testFunContext,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	globalContext &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面阐述入栈的一个过程，那什么时候EC从这个栈移除呢？&lt;br&gt;在说出栈前我们需要了解的一个过程是，前面说到解释器在执行的时候只能同时操作一个，这里解释器的流程重复的去栈内的最后一个元素执行。&lt;br&gt;当函数结束或者返回的时候就会退出当前活动的EC，这个时候就是出栈，（当抛出异常的时候，也会退出相关的EC，直到栈内只剩下全局的EC）.&lt;/p&gt;
&lt;p&gt;来看看下面的程序：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i === &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        foo(++i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面这个gif图演示了上面这个代码的上下文在栈内操作的一个过程  &lt;/p&gt;
&lt;img src=&quot;/2016/04/12/js执行上下文-Execution-Context/es1.gif&quot; alt=&quot;示意图&quot; title=&quot;示意图&quot;&gt;  
&lt;p&gt;&lt;strong&gt;关于执行上下文的栈操作,我们可以总结出5个关键的点:  &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程&lt;/li&gt;
&lt;li&gt;同步执行&lt;/li&gt;
&lt;li&gt;一个全局的执行上下文&lt;/li&gt;
&lt;li&gt;无限的个函数上下文&lt;/li&gt;
&lt;li&gt;每个函数调用的时候会创建一个新的执行上下文，包括函数自身的调用（自己调用自己）.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;执行上下文是如何创建的？&quot;&gt;&lt;a href=&quot;#执行上下文是如何创建的？&quot; class=&quot;headerlink&quot; title=&quot;执行上下文是如何创建的？&quot;&gt;&lt;/a&gt;执行上下文是如何创建的？&lt;/h3&gt;&lt;p&gt;上面抽象的讲了解释器是如何操作EC的，接着我们来看看每个EC内是如何运行的。&lt;br&gt;EC的代码被分成两个基本的阶段来处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进入EC&lt;/strong&gt;（&lt;code&gt;调用函数，在实际执行内部代码前&lt;/code&gt;）：&lt;ul&gt;
&lt;li&gt;创建一个&lt;a href=&quot;wwww.baidu.com&quot;&gt;作用域链&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;创建变量、函数声明(这里注意是函数的声明，不是&lt;code&gt;函数表单式&lt;/code&gt;两者的&lt;a href=&quot;www.baidu.com&quot;&gt;区别&lt;/a&gt;？)、arguments对象和参数。&lt;/li&gt;
&lt;li&gt;确认&lt;code&gt;this&lt;/code&gt;的值。&lt;blockquote&gt;
&lt;p&gt;这里我把它叫做确认变量阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行代码&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;变量赋值，函数引用，和执行其它代码  &lt;blockquote&gt;
&lt;p&gt;这里我把它叫做赋值阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们再发挥一下想象,对于EC来说在阶段1时创建了一系列的变量，方便后面阶段2时的使用，所以这些必须存储起来，我们这里抽象一下EC的结构大概是这样的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;executionContextObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   scopeChain: &amp;#123; &lt;span class=&quot;comment&quot;&gt;/*作用域链*/&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   variableObject: &amp;#123;&lt;span class=&quot;comment&quot;&gt;/*存放创建的变量、函数声明等*/&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;: &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码中关于&lt;a href=&quot;www.baidu.com&quot;&gt;scopeChain&lt;/a&gt;、&lt;a href=&quot;www.baidu.com&quot;&gt;variableObject&lt;/a&gt; 、&lt;a href=&quot;www.baidu.com&quot;&gt;this&lt;/a&gt;.还有更深入的知识，我们这里为了理解EC先提及不深究。&lt;/p&gt;
&lt;p&gt;下面我们还是通过一个模拟代码来解释一下阶段一和阶段二。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;,d); &lt;span class=&quot;comment&quot;&gt;//function d()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;,e);&lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;1111&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;d&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; e = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_e&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;x&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当函数test调用，随即创建了一个EC(函数类型的EC) ,在EC创建的时候首先是阶段一：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;executionContextObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   scopeChain: &amp;#123;...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//我们重点看这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   variableObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  a: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  b: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  c: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  d: &amp;lt;声明函数的引用&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  e: undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   this: &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后是阶段二&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;executionContextObj=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   scopeChain: &amp;#123;...&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//我们重点看这里,开始赋值了和引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   variableObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  a: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  b: &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  c: &lt;span class=&quot;number&quot;&gt;11111&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  d: &amp;lt;声明函数的引用&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  e: &amp;lt;函数表达式_e的引用&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   this: &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面我们可以看出，d(函数声明) 和e（函数表达式）函数的区别,这里也就能解释为什么上面的d输出是function d(){},e输入的是undefined。&lt;br&gt;现在知道文章开头的答案了吧。&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/#first-article&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is the Execution Context &amp;amp; Stack in JavaScript?&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://goddyzhao.tumblr.com/post/10020230352/execution-context&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;执行上下文（Execution Context）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本篇记录在JavaScript中代码的运行环境，也就是执行上下文概念,清楚javascript引擎内部在执行代码前做了些什么，解释为什么某些函数以及变量在没有被声明就可以被使用。&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b); &lt;span class=&quot;comment&quot;&gt;// function b()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(d); &lt;span class=&quot;comment&quot;&gt;// 异常：d is no defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d =&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;执行上下文-execution-context-分类&quot;&gt;&lt;a href=&quot;#执行上下文-execution-context-分类&quot; class=&quot;headerlink&quot; title=&quot;执行上下文(execution context)分类&quot;&gt;&lt;/a&gt;执行上下文(execution context)分类&lt;/h3&gt;&lt;p&gt;可执行上下文（简称EC）是一个抽象的概念，在ECMA262中用他来区分不同类型的可执行代码。&lt;br&gt;首先需要分清楚的是在js中，有以下不同类型的可执行上下文：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局代码&lt;/strong&gt;：这类的代码是在&lt;code&gt;程序&lt;/code&gt;级别上被处理的，例如加载的外部js代码或者是内联的js代码（script标签内的代码块）,全局代码不包括任何函数体内的js代码。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数代码&lt;/strong&gt;：当执行一个函数时，运行函数体中的代码（这里不包括函数内部的函数）。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;eval执行的代码&lt;/strong&gt;：使用内部函数eval执行的时候。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;换个角度说就是js解释器在执行js code时候的执行的环境.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="js深入系列" scheme="http://yoursite.com/tags/js%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97/"/>
    
      <category term="js执行上下文(Execution Context)" scheme="http://yoursite.com/tags/js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87-Execution-Context/"/>
    
  </entry>
  
  <entry>
    <title>js中的作用域</title>
    <link href="http://yoursite.com/2016/04/12/js%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2016/04/12/js中的作用域/</id>
    <published>2016-04-12T03:08:26.000Z</published>
    <updated>2016-04-13T10:12:47.969Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作用域是理解JavaScript的关键，作用域对JavaScript 有许多影响，从确定哪些变量可以被函数访问，到确定this 的值。JavaScript 作用域也关系到性能的优化，首先要理解作用域的工作原理。&lt;/p&gt;
&lt;h3 id=&quot;作用域链和标识符解析&quot;&gt;&lt;a href=&quot;#作用域链和标识符解析&quot; class=&quot;headerlink&quot; title=&quot;作用域链和标识符解析&quot;&gt;&lt;/a&gt;作用域链和标识符解析&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作用域是理解JavaScript的关键，作用域对JavaScript 有许多影响，从确定哪些变量可以被函数访问，到确定this 的值。Jav
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="js作用域" scheme="http://yoursite.com/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
      <category term="js深入系列" scheme="http://yoursite.com/tags/js%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>常用正则记录</title>
    <link href="http://yoursite.com/2016/04/09/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/04/09/常用正则记录/</id>
    <published>2016-04-09T02:31:07.000Z</published>
    <updated>2016-04-13T10:12:26.953Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;把练习过的正则题，记录下来，方便以后使用。&lt;/p&gt;
&lt;h3 id=&quot;题目列表&quot;&gt;&lt;a href=&quot;#题目列表&quot; class=&quot;headerlink&quot; title=&quot;题目列表&quot;&gt;&lt;/a&gt;题目列表&lt;/h3&gt;&lt;h4 id=&quot;1-匹配a连接内的地址&quot;&gt;&lt;a href=&quot;#1-匹配a连接内的地址&quot; class=&quot;headerlink&quot; title=&quot;1.匹配a连接内的地址&quot;&gt;&lt;/a&gt;1.匹配a连接内的地址&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//匹配出href中的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;lt;a.*href=(?:&quot;|&#39;*)([^&amp;gt;]*?)(?:&quot;|&#39;*)\s/gi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-匹配纯数字&quot;&gt;&lt;a href=&quot;#2-匹配纯数字&quot; class=&quot;headerlink&quot; title=&quot;2.匹配纯数字&quot;&gt;&lt;/a&gt;2.匹配纯数字&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//匹配出href中的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/^\d+$/gi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-一串数字每三位加一个逗号从后往前&quot;&gt;&lt;a href=&quot;#3-一串数字每三位加一个逗号从后往前&quot; class=&quot;headerlink&quot; title=&quot;3.一串数字每三位加一个逗号从后往前&quot;&gt;&lt;/a&gt;3.一串数字每三位加一个逗号从后往前&lt;/h4&gt;&lt;p&gt;如何使用正则把字符1234567,替换成1,234,567？&lt;br&gt;解题前必须要了解的东西：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;tetete&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.replace(&lt;span class=&quot;regexp&quot;&gt;/(te)/gi&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;$1,&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//结果&quot;te,te,te,&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于js的replace的用法可以看看这个&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_replace.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;replace使用方法&lt;/a&gt;.  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;开始解题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;题目要求每3位加一个逗号，那是否是直接截取3位（\d{3}）作为一个整体来匹配？&lt;br&gt;很显然不是，因为字符串的位数可能不是3的整倍数的时候，剩下字符小于3，所以这里要使用\d{1,3}。&lt;/li&gt;
&lt;li&gt;如何让\d{1,3}表达式成功&lt;strong&gt;匹配&lt;/strong&gt;？&lt;br&gt;假设\d{1,3}这个表达式匹配成功,那意味着它剩下的字符(&lt;code&gt;\d{1,3}匹配成功会消耗字符&lt;/code&gt;)一定要是3的整数倍,换句话说\d{1,3}匹配成功的条件就是它后面的位数要是3的整倍数。&lt;br&gt;把上面的描述用正则表达式翻译就是:&lt;br&gt;整倍数,表示成&lt;code&gt;(\d{3})+(?!\d)&lt;/code&gt;,由于这个只是匹配不捕获所以使用非获取匹配(?:exp),于是就变成&lt;code&gt;(?:\d{3})+(?!\d)&lt;/code&gt; 这个是关键。&lt;br&gt;\d{1,3}的后面，表示成&lt;strong&gt;(?=exp)&lt;/strong&gt;&lt;br&gt;所以最终变成：(\d{1,3})(?=(?:\d{3})+(?!\d))&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这个题目是比较经典的对预查(零宽度)的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不定时更新…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;把练习过的正则题，记录下来，方便以后使用。&lt;/p&gt;
&lt;h3 id=&quot;题目列表&quot;&gt;&lt;a href=&quot;#题目列表&quot; class=&quot;headerlink&quot; title=&quot;题目列表&quot;&gt;&lt;/a&gt;题目列表&lt;/h3&gt;&lt;h4 id=&quot;1-匹配a连接内的地址&quot;&gt;&lt;a href=&quot;#1-匹配a连接内的地址&quot; class=&quot;headerlink&quot; title=&quot;1.匹配a连接内的地址&quot;&gt;&lt;/a&gt;1.匹配a连接内的地址&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//匹配出href中的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;lt;a.*href=(?:&quot;|&#39;*)([^&amp;gt;]*?)(?:&quot;|&#39;*)\s/gi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-匹配纯数字&quot;&gt;&lt;a href=&quot;#2-匹配纯数字&quot; class=&quot;headerlink&quot; title=&quot;2.匹配纯数字&quot;&gt;&lt;/a&gt;2.匹配纯数字&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//匹配出href中的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/^\d+$/gi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-一串数字每三位加一个逗号从后往前&quot;&gt;&lt;a href=&quot;#3-一串数字每三位加一个逗号从后往前&quot; class=&quot;headerlink&quot; title=&quot;3.一串数字每三位加一个逗号从后往前&quot;&gt;&lt;/a&gt;3.一串数字每三位加一个逗号从后往前&lt;/h4&gt;&lt;p&gt;如何使用正则把字符1234567,替换成1,234,567？&lt;br&gt;解题前必须要了解的东西：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;tetete&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.replace(&lt;span class=&quot;regexp&quot;&gt;/(te)/gi&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;$1,&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//结果&quot;te,te,te,&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于js的replace的用法可以看看这个&lt;a href=&quot;http://www.w3school.com.cn/jsref/jsref_replace.asp&quot;&gt;replace使用方法&lt;/a&gt;.  &lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="js正则表达式收集" scheme="http://yoursite.com/tags/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>【正则】分组、捕获、预查</title>
    <link href="http://yoursite.com/2016/04/08/%E3%80%90%E6%AD%A3%E5%88%99%E3%80%91%E5%88%86%E7%BB%84%E3%80%81%E6%8D%95%E8%8E%B7%E3%80%81%E9%A2%84%E6%9F%A5/"/>
    <id>http://yoursite.com/2016/04/08/【正则】分组、捕获、预查/</id>
    <published>2016-04-08T03:58:01.000Z</published>
    <updated>2016-04-13T08:20:11.876Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇&lt;a href=&quot;/2016/04/08/正则表达式&quot;&gt;正则表达式&lt;/a&gt;我们介绍了正则表达式的基本规则，这篇主要是记录关于正则表达式里的捕获。&lt;/p&gt;
&lt;h3 id=&quot;捕获&quot;&gt;&lt;a href=&quot;#捕获&quot; class=&quot;headerlink&quot; title=&quot;捕获&quot;&gt;&lt;/a&gt;捕获&lt;/h3&gt;&lt;p&gt;在上一篇中介绍了使用小括号包围起来的表达式,会捕获匹配的内容到默认的分组中。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;捕获是指把匹配的内容进行存储并编号，方面后续的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;非捕获&quot;&gt;&lt;a href=&quot;#非捕获&quot; class=&quot;headerlink&quot; title=&quot;非捕获&quot;&gt;&lt;/a&gt;非捕获&lt;/h3&gt;&lt;p&gt;在实际实用中我们需要对字符进行分组匹配但是后续不需要操作匹配的内容，只是查找，如果我们使用（abc）这种模式明显就很浪费。&lt;br&gt;这里就引出只匹配不捕获的表达式：&lt;br&gt;&lt;strong&gt;(?:abc)&lt;/strong&gt; ： 匹配abc.但是不对匹配的内容进行捕获。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/industr(?:i|ies)/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//匹配industry 或者 industries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;预查&quot;&gt;&lt;a href=&quot;#预查&quot; class=&quot;headerlink&quot; title=&quot;预查&quot;&gt;&lt;/a&gt;预查&lt;/h3&gt;&lt;p&gt;在正则表达式中，预查（也叫断言）包括正向预查，反向预查,预查的特点是不消耗字符，所以也叫零宽度预查(断言).&lt;br&gt;什么叫不消耗字符,看下面的例子:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;regexp&quot;&gt;/te(?=s)t/&lt;/span&gt;.test(s)); &lt;span class=&quot;comment&quot;&gt;//false;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;regexp&quot;&gt;/te(?=s)st/&lt;/span&gt;.test(s)); &lt;span class=&quot;comment&quot;&gt;//true;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表达式(?=s)意思是正向肯定预查，在这里的意思是确定e后面的字符是s,如果不是s这个e就不会被匹配（作为匹配e字符的条件）因为不是所有的s字符后面都会跟着e的，关于这个表达式的详细解释我们后面再讨论。&lt;br&gt;这里我们想要突出的意思是 &lt;strong&gt;console.log(/te(?=s)t/.test(s))&lt;/strong&gt;匹配失败，原因就是(?=s)并不会把s这个字符匹配出来（消耗掉），而是作为匹配字符e的前置条件。&lt;br&gt;如果还不明白我们可以看看正常的消耗字符的匹配&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/\w&amp;#123;1&amp;#125;(?:\w&amp;#123;1&amp;#125;)/g&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//[&quot;te&quot;, &quot;st&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//当\w&amp;#123;1&amp;#125;匹配到t,(?:\w&amp;#123;1&amp;#125;)匹配到e,这个时候本轮匹配结束，下轮匹配从s开始，并不是从e，说明了e已经被消耗掉了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基维百科：预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;模拟匹配过程&quot;&gt;&lt;a href=&quot;#模拟匹配过程&quot; class=&quot;headerlink&quot; title=&quot;模拟匹配过程&quot;&gt;&lt;/a&gt;模拟匹配过程&lt;/h3&gt;&lt;p&gt;为了更好的理解消耗字符和不消耗字符匹配的区别，做了下面的模拟匹配过程。&lt;br&gt;&lt;strong&gt;消耗字符&lt;/strong&gt;的匹配的流程大概就是这样的一个过程(表达式 &lt;code&gt;\w{1}(?:\w{1})&lt;/code&gt;,字符串&lt;code&gt;&amp;#39;test&amp;#39;&lt;/code&gt;)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;轮数&lt;/th&gt;
&lt;th&gt;过程&lt;/th&gt;
&lt;th&gt;结束位置&lt;/th&gt;
&lt;th&gt;本轮结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;指针走到第一位，\w{1}匹配到字符’t’,&lt;br&gt; (?:\w{1})匹配到字符’e’,&lt;br&gt;满足表达式的匹配，本轮结束&lt;/td&gt;
&lt;td&gt;字符e&lt;/td&gt;
&lt;td&gt;te&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;指针从e往后一位开始(字符s)，&lt;br&gt;\w{1}匹配到字符s, (?:\w{1})匹配到字符t,&lt;br&gt;满足表达式的匹配，本轮结束&lt;/td&gt;
&lt;td&gt;字符t&lt;/td&gt;
&lt;td&gt;st&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;指针从t字符往后一位,没有数据结束所有的表达式匹配。&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后的结果为[‘te’,’st’];  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不消耗字符&lt;/strong&gt;的匹配的流程大概就是这样的一个过程(表达式&lt;code&gt;\w{1}(?=\w{1})&lt;/code&gt;,字符串&lt;code&gt;&amp;#39;test&amp;#39;&lt;/code&gt;)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;轮数&lt;/th&gt;
&lt;th&gt;过程&lt;/th&gt;
&lt;th&gt;结束位置&lt;/th&gt;
&lt;th&gt;本轮结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;指针走到第一位，\w{1}匹配到字符’t’，&lt;br&gt;同时(?=\w{1})查看t后面是否跟着一个字符，&lt;br&gt;满足匹配成功，本轮结束&lt;/td&gt;
&lt;td&gt;字符t&lt;/td&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;指针从t往后一位开始(字符‘e’)，\w{1}匹配到字符’e’,&lt;br&gt; 同时(?=\w{1})查看e后面是否跟着一个字符，&lt;br&gt;满足匹配成功，本轮结束&lt;/td&gt;
&lt;td&gt;字符e&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;指针从e往后一位开始(字符‘s’)，\w{1}匹配到字符’s’,&lt;br&gt;同时(?=\w{1})查看s后面是否跟着一个字符，&lt;br&gt;满足匹配成功，本轮结束&lt;/td&gt;
&lt;td&gt;字符s&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;指针从s往后一位开始(字符‘t’)，\w{1}匹配到字符’t’,&lt;br&gt; 同时(?=\w{1})查看t后面是否跟着一个字符，&lt;br&gt;不满足匹配失败，本轮结束&lt;/td&gt;
&lt;td&gt;字符t&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;指针从t字符往后一位,没有数据结束所有的表达式匹配。&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后的结果为[‘t’,’e’,’s’];  &lt;/p&gt;
&lt;h3 id=&quot;正向预查&quot;&gt;&lt;a href=&quot;#正向预查&quot; class=&quot;headerlink&quot; title=&quot;正向预查&quot;&gt;&lt;/a&gt;正向预查&lt;/h3&gt;&lt;p&gt;理解了预查不消耗字符的原理，我们回到正题，谈谈正向预查，正向预查分成2部分&lt;code&gt;正向肯定预查&lt;/code&gt;(零宽度正预测先行断言)和&lt;code&gt;正向否定预查&lt;/code&gt;(零宽度负预测先行断言)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正向肯定预查&lt;/strong&gt;&lt;br&gt;格式&lt;strong&gt;(?=exp)&lt;/strong&gt;,通俗的理解是&lt;strong&gt;如果当前匹配的字符后面紧跟着&lt;code&gt;是&lt;/code&gt;exp则匹配当前字符，否则不匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/\w(?=t)/g&lt;/span&gt;) [&lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正向否定预查&lt;/strong&gt;&lt;br&gt;格式&lt;strong&gt;(?!exp)&lt;/strong&gt;,通俗的理解是&lt;strong&gt;如果当前匹配的字符后面紧跟着的&lt;code&gt;不是&lt;/code&gt;exp则匹配当前字符，否则不匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/\w(?!t)/g&lt;/span&gt;) [&lt;span class=&quot;string&quot;&gt;&quot;t&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;t&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;反向预查&quot;&gt;&lt;a href=&quot;#反向预查&quot; class=&quot;headerlink&quot; title=&quot;反向预查&quot;&gt;&lt;/a&gt;反向预查&lt;/h3&gt;&lt;p&gt;反向预查也同样分成&lt;code&gt;反向肯定预查&lt;/code&gt;(零宽度正回顾后发断言)和&lt;code&gt;反向否定预查&lt;/code&gt;(零宽度负回顾后发断言)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;反向肯定预查&lt;/strong&gt;&lt;br&gt;格式&lt;strong&gt;(?&amp;lt;=exp)&lt;/strong&gt;,跟正向肯定预查相似，反向肯定预查是&lt;strong&gt;当前匹配的字符前面紧跟着&lt;code&gt;是&lt;/code&gt;exp则匹配当前字符，否则不匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(?&amp;lt;=t)\w  //[&quot;e&quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;反向否定预查&lt;/strong&gt;&lt;br&gt;格式&lt;strong&gt;(?&amp;lt;!exp)&lt;/strong&gt;,跟正向否定预查相似，反向否定预查是&lt;strong&gt;当前匹配的字符前面紧跟着的&lt;code&gt;不是&lt;/code&gt;exp则匹配当前字符，否则不匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str=&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(?&amp;lt;!t)\w &lt;span class=&quot;comment&quot;&gt;//[&quot;t&quot;,&quot;s&quot;,&quot;t&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;js中不支持反向预查，所有上面的代码使用的是伪代码.(php、java等语言是支持反向的).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;我们来总结关于分组操作的一些区别&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;艺名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;捕获&lt;/th&gt;
&lt;th&gt;引用&lt;/th&gt;
&lt;th&gt;消耗字符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;普通分组&lt;/td&gt;
&lt;td&gt;匹配exp分组并捕获匹配内容&lt;/td&gt;
&lt;td&gt;捕获&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;td&gt;消耗字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(?:exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;非捕获分组&lt;/td&gt;
&lt;td&gt;匹配exp分组&lt;/td&gt;
&lt;td&gt;不捕获&lt;/td&gt;
&lt;td&gt;不可引用&lt;/td&gt;
&lt;td&gt;消耗字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(?=exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;正向肯定预查&lt;/td&gt;
&lt;td&gt;如果当前字符后面紧跟的是exp则匹配当前字符(不包含exp),&lt;/td&gt;
&lt;td&gt;不捕获&lt;/td&gt;
&lt;td&gt;不可引用&lt;/td&gt;
&lt;td&gt;不消耗字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(?!exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;正向否定预查&lt;/td&gt;
&lt;td&gt;如果当前字符后面紧跟的不是exp则匹配当前字符(不包含exp)&lt;/td&gt;
&lt;td&gt;不捕获&lt;/td&gt;
&lt;td&gt;不可引用&lt;/td&gt;
&lt;td&gt;不消耗字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(?&amp;lt;exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;反向肯定预查&lt;/td&gt;
&lt;td&gt;如果当前字符前面紧跟的是exp则匹配当前字符(不包含exp),&lt;/td&gt;
&lt;td&gt;不捕获&lt;/td&gt;
&lt;td&gt;不可引用&lt;/td&gt;
&lt;td&gt;不消耗字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;(?&amp;lt;!exp)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;反向否定预查&lt;/td&gt;
&lt;td&gt;如果当前字符前面紧跟的不是exp则匹配当前字符(不包含exp),&lt;/td&gt;
&lt;td&gt;不捕获&lt;/td&gt;
&lt;td&gt;不可引用&lt;/td&gt;
&lt;td&gt;不消耗字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;百度百科正则表达式&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上一篇&lt;a href=&quot;/2016/04/08/正则表达式&quot;&gt;正则表达式&lt;/a&gt;我们介绍了正则表达式的基本规则，这篇主要是记录关于正则表达式里的捕获。&lt;/p&gt;
&lt;h3 id=&quot;捕获&quot;&gt;&lt;a href=&quot;#捕获&quot; class=&quot;headerlink&quot; title=&quot;捕获&quot;&gt;&lt;/a&gt;捕获&lt;/h3&gt;&lt;p&gt;在上一篇中介绍了使用小括号包围起来的表达式,会捕获匹配的内容到默认的分组中。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;捕获是指把匹配的内容进行存储并编号，方面后续的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;非捕获&quot;&gt;&lt;a href=&quot;#非捕获&quot; class=&quot;headerlink&quot; title=&quot;非捕获&quot;&gt;&lt;/a&gt;非捕获&lt;/h3&gt;&lt;p&gt;在实际实用中我们需要对字符进行分组匹配但是后续不需要操作匹配的内容，只是查找，如果我们使用（abc）这种模式明显就很浪费。&lt;br&gt;这里就引出只匹配不捕获的表达式：&lt;br&gt;&lt;strong&gt;(?:abc)&lt;/strong&gt; ： 匹配abc.但是不对匹配的内容进行捕获。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/industr(?:i|ies)/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//匹配industry 或者 industries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式(下)</title>
    <link href="http://yoursite.com/2016/04/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%B8%8B)/"/>
    <id>http://yoursite.com/2016/04/06/正则表达式(下)/</id>
    <published>2016-04-06T03:29:26.000Z</published>
    <updated>2016-04-13T10:18:30.947Z</updated>
    
    <content type="html">&lt;h3 id=&quot;匹配自定义的集合&quot;&gt;&lt;a href=&quot;#匹配自定义的集合&quot; class=&quot;headerlink&quot; title=&quot;匹配自定义的集合&quot;&gt;&lt;/a&gt;匹配自定义的集合&lt;/h3&gt;&lt;p&gt;当上面的元字符指定的匹配规则并不满足你的需求的时候,你可以自己定义匹配的规则：&lt;br&gt;例如想要匹配元音字符（aeiou）可以使用/[aeiou]/，它能匹配一个字符串中任意数量的aeiou字符，例如能匹配“hi”中的i。&lt;br&gt;自定义匹配集合就是使用&lt;strong&gt;中括号&lt;/strong&gt;包围字符集合，例如[0-9]匹配所有的正整数，相当于\d,[a-zA-Z]匹配所有的大小写字母。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里集合中使用了&lt;strong&gt;-&lt;/strong&gt;，只有&lt;strong&gt;-&lt;/strong&gt;在字符组（方括号）内部,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示&lt;strong&gt;‘-‘&lt;/strong&gt;本身.&lt;br&gt;例如[-az]表示的是匹配’-‘,’a’,’z’这三个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;反向匹配&quot;&gt;&lt;a href=&quot;#反向匹配&quot; class=&quot;headerlink&quot; title=&quot;反向匹配&quot;&gt;&lt;/a&gt;反向匹配&lt;/h3&gt;&lt;p&gt;如果不想匹配指定的字符则需要加上’^’(英文输入法下，键盘6的位置):&lt;br&gt;在前面讲过元字符’^’表示匹配开头的位置，如果^出现在方括号的&lt;strong&gt;开头位置&lt;/strong&gt;表示的是&lt;strong&gt;不匹配&lt;/strong&gt; 。&lt;br&gt;例如[^aeiou]，匹配除了aeiou以外的其他字符。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符组&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[abc]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配abc字符集中的任意一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配除了abc字符集的任意字符，例如：123abce，匹配出123e。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配a-z字符集范围内的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^a-z]&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;匹配不在a-z字符集范围内的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;当这个字符组（中括号包含的字符）后面使用次数（匹配次数的元字符）修饰的时候，匹配的次数不是以&lt;strong&gt;字符组整体&lt;/strong&gt;当做一个匹配标本，而是字符组内的各个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面描述的意思是：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&quot;aeiou456aeiouai123&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/[aeiou]&amp;#123;6&amp;#125;/g&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//匹配出aeioua这6个字符而不是6个aeiou连成的字符。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/[aeiou]&amp;#123;7&amp;#125;/g&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//匹配出aeiouai.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/[aeiou]&amp;#123;3&amp;#125;/g&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//匹配出aei（456前面的aei）、aei(456后面的aei)、oua。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;分组和引用&quot;&gt;&lt;a href=&quot;#分组和引用&quot; class=&quot;headerlink&quot; title=&quot;分组和引用&quot;&gt;&lt;/a&gt;分组和引用&lt;/h3&gt;&lt;p&gt;通过前面&lt;code&gt;匹配次数的元字符&lt;/code&gt;的介绍，我们知道单字符如何重复匹配，如果是多个字符如何重复，可能会想到用上面介绍的字符集合（放到[]里？），但是字符集合的重复匹配，不是以字符集合为整体的，并且匹配的数据不能进行引用。这个时候我们就需要用到子表达式(分组)。&lt;/p&gt;
&lt;h4 id=&quot;分组&quot;&gt;&lt;a href=&quot;#分组&quot; class=&quot;headerlink&quot; title=&quot;分组&quot;&gt;&lt;/a&gt;分组&lt;/h4&gt;&lt;p&gt;语法就是一对括号(),把需要重复匹配的字符放到这个分组(括号)里，后面可以就可以指定这个分组的重复次数了,例如这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;testtt1ttest23tt&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//例1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/(test)&amp;#123;1&amp;#125;/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;test&quot;,&quot;test&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从输出结果我们就可以看到()跟[]的区别，()是当做一个整体的重复。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//例2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/(^test)/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;test&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/[^test]/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;从上面的例2可以看出在()内使用&lt;code&gt;^&lt;/code&gt;并不像在[]一样是取反，而是&lt;code&gt;^&lt;/code&gt;匹配开头的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h4&gt;&lt;p&gt;上面介绍了分组的重复匹配，如果想要把匹配到的分组内容,取出来要如何操作呢？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;tetetet1tteste23te23&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/(te)\1/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;tete&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/(?&amp;lt;myGroup&amp;gt;te)\k&amp;lt;myGroup&amp;gt;/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//[&quot;tete&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表达式中的\1就是引用1分组，意思是引用前面&lt;strong&gt;第一个&lt;/strong&gt;匹配（捕获）到的分组,格式就是’\’+一个正整数.&lt;br&gt;如果要自定义分组的名称（不使用默认的数字）：&lt;br&gt;格式是:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;?&amp;lt;name&amp;gt; 或者 ?&#39;name&#39;,引用\k&amp;lt;name&amp;gt; 或者\k&#39;name&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;js 并不支持分组别名…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于分组捕获的还有很多内容，下一篇接着介绍.&lt;/p&gt;
&lt;h3 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h3&gt; &lt;a href=&quot;/2016/04/06/正则表达式(上)/&quot; title=&quot;正则表达式(上)&quot;&gt;正则表达式(上)&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;匹配自定义的集合&quot;&gt;&lt;a href=&quot;#匹配自定义的集合&quot; class=&quot;headerlink&quot; title=&quot;匹配自定义的集合&quot;&gt;&lt;/a&gt;匹配自定义的集合&lt;/h3&gt;&lt;p&gt;当上面的元字符指定的匹配规则并不满足你的需求的时候,你可以自己定义匹配的规则：&lt;br&gt;例如想要匹配元音字符（aeiou）可以使用/[aeiou]/，它能匹配一个字符串中任意数量的aeiou字符，例如能匹配“hi”中的i。&lt;br&gt;自定义匹配集合就是使用&lt;strong&gt;中括号&lt;/strong&gt;包围字符集合，例如[0-9]匹配所有的正整数，相当于\d,[a-zA-Z]匹配所有的大小写字母。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里集合中使用了&lt;strong&gt;-&lt;/strong&gt;，只有&lt;strong&gt;-&lt;/strong&gt;在字符组（方括号）内部,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示&lt;strong&gt;‘-‘&lt;/strong&gt;本身.&lt;br&gt;例如[-az]表示的是匹配’-‘,’a’,’z’这三个字符。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式(上)</title>
    <link href="http://yoursite.com/2016/04/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F(%E4%B8%8A)/"/>
    <id>http://yoursite.com/2016/04/06/正则表达式(上)/</id>
    <published>2016-04-06T03:29:26.000Z</published>
    <updated>2016-04-13T10:16:37.686Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录如何学习和使用正则表达式。&lt;/p&gt;
&lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;p&gt;我对正则表达式的理解就是，用&lt;code&gt;普通字符&lt;/code&gt;和&lt;code&gt;特定字符&lt;/code&gt;组成一个“规则字符串”，用这个“规则字符串”来过滤操作的对象。正则表达式的规则不局限于语言，所以学习好正则能受用于各个平台。&lt;/p&gt;
&lt;h3 id=&quot;字符&quot;&gt;&lt;a href=&quot;#字符&quot; class=&quot;headerlink&quot; title=&quot;字符&quot;&gt;&lt;/a&gt;字符&lt;/h3&gt;&lt;p&gt;一个正则表达式可以由下面两种字符类型组合而成，也可以是单一的一种字符类型组成：&lt;br&gt;&lt;code&gt;普通字符&lt;/code&gt;:包括大小写的字母和数字.&lt;br&gt;&lt;code&gt;特定字符&lt;/code&gt;:在正则表达式中规定了一些代表某种意义的字符，也叫元字符。     &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;表达式分解&quot;&gt;&lt;a href=&quot;#表达式分解&quot; class=&quot;headerlink&quot; title=&quot;表达式分解&quot;&gt;&lt;/a&gt;表达式分解&lt;/h3&gt;&lt;p&gt;单一的普通字符,组合成的正则表达式：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/test/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一个仅有普通字符的正则表达式，能匹配test开头或者包含test的字符串。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在js中正则表达式以‘/’开头和结尾。中间包含的就是匹配的规字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的表达式不仅能匹配test，还能匹配包含test的字符串例如：1test2、atest123等，如果要准确的匹配test这个单词那么我们就需要做一个小小的改造：&lt;br&gt;普通字符+元字符组成的正则表达式：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/\btest\b/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;\b&lt;/code&gt; &lt;/strong&gt;: 是元字符，匹配一个单词边界，也就是指单词和空格间的位置.&lt;br&gt;能匹配“This is test regex !”中的“test”,但是不能匹配“This is test123 regex”中的“test”。      &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var test1=&#39;This is test regex&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var test2=&#39;This is test123 regex&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//匹配test单词和它后面的任意的字符可以使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/\btest\b.*/.test(test1) //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//匹配test这个字符和它后面的任意数量的数字可以使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/\btest\d*/.test(test2) //true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的表达式中我们注意到有 &lt;code&gt;.&lt;/code&gt;(点) ,&lt;code&gt;*&lt;/code&gt;（星号）,&lt;code&gt;\d&lt;/code&gt;  这些也是元字符。  &lt;/p&gt;
&lt;h3 id=&quot;常用元字符&quot;&gt;&lt;a href=&quot;#常用元字符&quot; class=&quot;headerlink&quot; title=&quot;常用元字符&quot;&gt;&lt;/a&gt;常用元字符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元 字 符&lt;/th&gt;
&lt;th&gt;描述 &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;匹配除“\r\n”之外的任何单个字符。要匹配包括“\r\n”在内的任何字符，请使用像“\s”的模式。  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;匹配前面的子表达式任意次。例如，zo&lt;em&gt;能匹配“z”，“zo”以及“zoo”,&lt;/em&gt;等价于{0,}。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;匹配一个数字字符。等价于[0-9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;匹配一个非数字字符。等价于[0-9]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集(不能匹配中文)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;匹配任何可见字符。等价于[^ \f\n\r\t\v]。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配一个单词边界(空格、段落首行、段落末尾、逗号、句号、”-“等符号)，也就是指单词和空格间的位置.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配非单词边界。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;匹配字符串的开始位置。(多行模式下，将匹配换行符后面的开始位置)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;匹配字符串的结束位置。(多行模式下，将匹配换行符后面的结束位置)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&amp;#124;b&lt;/td&gt;
&lt;td&gt;匹配字符a或者b。(匹配的顺序左-&amp;gt;右，只要满足了就不会继续匹配，如果匹配到了a,就不会继续匹配b)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;上面表格列出了一些比较常用的元字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;转义符&quot;&gt;&lt;a href=&quot;#转义符&quot; class=&quot;headerlink&quot; title=&quot;转义符&quot;&gt;&lt;/a&gt;转义符&lt;/h3&gt;&lt;p&gt;当你在使用正则表达式匹配跟元字符一样的字符（例如’.’,’*’,’\’）的时候就需要用到转义符：&lt;br&gt;例如想要匹配’.’就需要使用‘\.’来匹配。  &lt;/p&gt;
&lt;h3 id=&quot;匹配次数的元字符&quot;&gt;&lt;a href=&quot;#匹配次数的元字符&quot; class=&quot;headerlink&quot; title=&quot;匹配次数的元字符&quot;&gt;&lt;/a&gt;匹配次数的元字符&lt;/h3&gt;&lt;p&gt;从上面的表格中看到‘*’元字符的描述是，匹配表达式任意次数，下面整理了在正则中表示匹配次数的元字符：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;元字符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;匹配前面的子表达式任意次(0到n次)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;匹配前面的子表达式一次或多次(大于等于1次）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;匹配前面的子表达式零次或一次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n}&lt;/td&gt;
&lt;td&gt;n是一个非负整数。匹配确定的n次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,}&lt;/td&gt;
&lt;td&gt;n是一个非负整数。至少匹配n次。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{n,m}&lt;/td&gt;
&lt;td&gt;m和n均为非负整数，其中n&amp;lt;=m。最少匹配n次且最多匹配m次。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里需要注意一个地方就是&lt;strong&gt;?&lt;/strong&gt;,当&lt;strong&gt;?&lt;/strong&gt;出现在上面这个表格的任意一个元字符前面的时候，匹配的规则就会变成&lt;strong&gt;尽量少匹配&lt;/strong&gt;。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&#39;testtttttt&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//+原意是匹配一次或者多次，加上了?就只会匹配一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/test+?/g&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&amp;#123;2,10&amp;#125;原意是匹配最少2次最多10次，加上了?就只会匹配2次。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.match(&lt;span class=&quot;regexp&quot;&gt;/test&amp;#123;2,10&amp;#125;?/g&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//testt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种匹配的模式叫非贪婪的（就是在限定的匹配次数范围内，选择最少的匹配次数）,默认情况下是贪婪模式（例如单纯用+会匹配最多的次数）。&lt;/p&gt;
&lt;h3 id=&quot;续篇&quot;&gt;&lt;a href=&quot;#续篇&quot; class=&quot;headerlink&quot; title=&quot;续篇&quot;&gt;&lt;/a&gt;续篇&lt;/h3&gt;&lt;a href=&quot;/2016/04/06/正则表达式(下)/&quot; title=&quot;正则表达式(下)&quot;&gt;正则表达式(下)&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录如何学习和使用正则表达式。&lt;/p&gt;
&lt;h3 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h3&gt;&lt;p&gt;我对正则表达式的理解就是，用&lt;code&gt;普通字符&lt;/code&gt;和&lt;code&gt;特定字符&lt;/code&gt;组成一个“规则字符串”，用这个“规则字符串”来过滤操作的对象。正则表达式的规则不局限于语言，所以学习好正则能受用于各个平台。&lt;/p&gt;
&lt;h3 id=&quot;字符&quot;&gt;&lt;a href=&quot;#字符&quot; class=&quot;headerlink&quot; title=&quot;字符&quot;&gt;&lt;/a&gt;字符&lt;/h3&gt;&lt;p&gt;一个正则表达式可以由下面两种字符类型组合而成，也可以是单一的一种字符类型组成：&lt;br&gt;&lt;code&gt;普通字符&lt;/code&gt;:包括大小写的字母和数字.&lt;br&gt;&lt;code&gt;特定字符&lt;/code&gt;:在正则表达式中规定了一些代表某种意义的字符，也叫元字符。     &lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>柯里化、偏函数(局部应用)小计</title>
    <link href="http://yoursite.com/2016/03/31/%E6%9F%AF%E9%87%8C%E5%8C%96%E3%80%81%E5%81%8F%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%E5%B0%8F%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/03/31/柯里化、偏函数应用小计/</id>
    <published>2016-03-31T04:19:51.000Z</published>
    <updated>2016-04-13T10:12:01.859Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录关于柯里化(currying),和偏函数或部分应用(Partial Application)的使用，以及它们之间的差异。&lt;/p&gt;
&lt;h3 id=&quot;偏函数-partial-application&quot;&gt;&lt;a href=&quot;#偏函数-partial-application&quot; class=&quot;headerlink&quot; title=&quot;偏函数(partial application)&quot;&gt;&lt;/a&gt;偏函数(partial application)&lt;/h3&gt;&lt;p&gt;偏函数适用于：当一个函数有多个参数，我们想通过固定其中的几个参数,产生一个新的函数，例如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一个记录日志的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code,msg,color&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//这里假设一个打印信息的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showlog(code,msg,color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//固定code和color&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;errorLog&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,msg,&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的errorLog就是log函数的一个偏函数。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;柯里化-partial-application&quot;&gt;&lt;a href=&quot;#柯里化-partial-application&quot; class=&quot;headerlink&quot; title=&quot;柯里化(partial application)&quot;&gt;&lt;/a&gt;柯里化(partial application)&lt;/h3&gt;&lt;p&gt;柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一个记录日志的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code,msg,color&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//这里假设一个打印信息的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showlog(code,msg,color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//针对这个log函数实现柯里化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logCurrying&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;color&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; showlog(code,msg,color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//currying前,多参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;错误信息&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//currying后,只能单参调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logCurrying(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;error msg&#39;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的这个logCurrying函数针对log函数的Currying，我们可以往扩展方向写，适用于所有的函数(js版):&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;curry&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; slice = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//获取柯里化函数的参数的长度;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fnlen=fn.length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; inner=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;innerArgs&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            args.push(innerArgs); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//如果调用的参数累积到了fn要求的长度则执行fn.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(args.length&amp;lt;fnlen)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//拿上面的log函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curry(log)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;柯里化应用&quot;&gt;&lt;a href=&quot;#柯里化应用&quot; class=&quot;headerlink&quot; title=&quot;柯里化应用&quot;&gt;&lt;/a&gt;柯里化应用&lt;/h4&gt;&lt;p&gt;通过上面的代码可以看出来，柯里化的实现其实是通过闭包把值预先存起来，最后才进行函数的调用。&lt;br&gt;所以需要预处理的时候可以使用柯里化。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//绑定事件处理的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bindEvent=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el,type,cbfun,isCaptrue&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el.addEventListener(type,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*....*/&lt;/span&gt;&amp;#125;,allowCaptrue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.attachEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;+type,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*....*/&lt;/span&gt;&amp;#125;,allowCaptrue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面是一个兼容IE的监听事件处理的函数，仔细看发现一个问题，每次使用这个函数的时候都要if..else..判断，很繁琐下面使用currying改造一下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bindEvent=(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el,type,cbfun,isCaptrue&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            el.addEventListener(type,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*....*/&lt;/span&gt;&amp;#125;,allowCaptrue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.attachEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el,type,cbfun,isCaptrue&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            el.addEventListener(&lt;span class=&quot;string&quot;&gt;&quot;on&quot;&lt;/span&gt;+type,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*....*/&lt;/span&gt;&amp;#125;,allowCaptrue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;currying比较有趣的例子:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myMatch=curry(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;reg,str&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.match(reg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; replace = curry(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;what, replacement, str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.replace(what, replacement);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//可以这样使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasSpaces = match(&lt;span class=&quot;regexp&quot;&gt;/\s+/g&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hasSpaces(&lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [ &#39; &#39; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hasSpaces(&lt;span class=&quot;string&quot;&gt;&quot;spaceless&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ejohn.org/blog/partial-functions-in-javascript/#postcomment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Partial Application in Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不可或缺的 curry&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;记录关于柯里化(currying),和偏函数或部分应用(Partial Application)的使用，以及它们之间的差异。&lt;/p&gt;
&lt;h3 id=&quot;偏函数-partial-application&quot;&gt;&lt;a href=&quot;#偏函数-partial-application&quot; class=&quot;headerlink&quot; title=&quot;偏函数(partial application)&quot;&gt;&lt;/a&gt;偏函数(partial application)&lt;/h3&gt;&lt;p&gt;偏函数适用于：当一个函数有多个参数，我们想通过固定其中的几个参数,产生一个新的函数，例如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一个记录日志的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code,msg,color&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//这里假设一个打印信息的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      showlog(code,msg,color);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//固定code和color&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;errorLog&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,msg,&lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的errorLog就是log函数的一个偏函数。&lt;br&gt;
    
    </summary>
    
      <category term="Functional Programming" scheme="http://yoursite.com/categories/Functional-Programming/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="柯里化(Currying)" scheme="http://yoursite.com/tags/%E6%9F%AF%E9%87%8C%E5%8C%96-Currying/"/>
    
      <category term="偏函数（局部应用Partial Application)" scheme="http://yoursite.com/tags/%E5%81%8F%E5%87%BD%E6%95%B0%EF%BC%88%E5%B1%80%E9%83%A8%E5%BA%94%E7%94%A8Partial-Application/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据类型</title>
    <link href="http://yoursite.com/2016/03/28/JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/03/28/JavaScript数据类型/</id>
    <published>2016-03-28T09:06:39.000Z</published>
    <updated>2016-04-13T10:11:36.088Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;整理js数据类型相关的资料，方便以后查阅&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;p&gt;根据js对值的操作规则可以来区分成2个大类，分别是基本类型和引用类型。  &lt;/p&gt;
&lt;h4 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h4&gt;&lt;p&gt;成员：数字、文本字符串、布尔值、null和undefined。&lt;br&gt;存储：在存储的角度来说它拥有固定的大小，例如一个数值在内存中占八个字节，而一个布尔值就一位。&lt;br&gt;判断类型：使用typeof()&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));   &lt;span class=&quot;comment&quot;&gt;// number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;));   &lt;span class=&quot;comment&quot;&gt;// number--特别注意&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));  &lt;span class=&quot;comment&quot;&gt;// boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;));  &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h4&gt;&lt;p&gt;成员：对象、数组、函数。&lt;br&gt;存储：引用类型可以有任意的长度，它并没有固定大小，所以存储值的时候不能指定空间大小存储，所以存放的是&lt;code&gt;指针&lt;/code&gt;或者&lt;code&gt;内存地址&lt;/code&gt;。  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;判断类型：需要结合instanceof来判断，单一的判断typeof还不够。例如下面的判断没办法区分数组和对象。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &amp;#125;));  &lt;span class=&quot;comment&quot;&gt;//function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;([&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;123&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;]));  &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (&amp;#123; name: luo, age: &lt;span class=&quot;number&quot;&gt;222&lt;/span&gt; &amp;#125;));  &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)));  &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)));  &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)));  &lt;span class=&quot;comment&quot;&gt;//object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;undefined 表示在使用一个&lt;strong&gt;未被声明&lt;/strong&gt;，或者&lt;strong&gt;未赋值&lt;/strong&gt;或者&lt;strong&gt;不存在的对象属性&lt;/strong&gt;的时候,使用typeof(undefined)===undefined。&lt;br&gt;null 表示的是&lt;strong&gt;无值&lt;/strong&gt;也表示&lt;strong&gt;无对象&lt;/strong&gt;,使用typeof(null)===Object&lt;br&gt;undefined == null  /&lt;em&gt; ture  &lt;/em&gt;/&lt;br&gt;undefined === null /&lt;em&gt; false &lt;/em&gt;/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;p&gt;声明一个变量使用var（显式声明）,如果不使用就是隐式声明，变量会变成全局变量。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c=&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//全局变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a;&lt;span class=&quot;comment&quot;&gt;//显式声明  （局部变量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   b=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//隐式声明并赋值。（全局变量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c=&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a) &lt;span class=&quot;comment&quot;&gt;// 异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b) &lt;span class=&quot;comment&quot;&gt;//3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;在js中有三种重要的操作数值的方法，分别是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制。  &lt;/li&gt;
&lt;li&gt;传参（传递给函数当做参数）。&lt;/li&gt;
&lt;li&gt;比较（值之间的对比）。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每种操作的方法都有2种不同的方式，分别是&lt;strong&gt;使用值&lt;/strong&gt;和&lt;strong&gt;使用引用&lt;/strong&gt;。&lt;br&gt;根据不同的使用方式，操作可以分为：  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;使用值&lt;/th&gt;
&lt;th&gt;使用引用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;td&gt;实际复制的是值，存在2个不同的、独立的副本&lt;/td&gt;
&lt;td&gt;复制的是值的引用副本，如果通过这个引用来修改数值则会影响到原引用的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传参&lt;/td&gt;
&lt;td&gt;传递的是值的一个独立副本，不影响函数外部&lt;/td&gt;
&lt;td&gt;传递的是引用的副本，函数内部修改引用对应的数值会影响外部。（这里注意的是修改引用对应的数值，不是引用本身。如果修改这个引用本身则不影响外部函数） &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较&lt;/td&gt;
&lt;td&gt;比较的是两个值（通常是逐个字节对比），来判断是否相同&lt;/td&gt;
&lt;td&gt;比较的是引用是否是同一个数值，所以即使相同的字节构成的数值，只要是引用不同也不同。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;什么情况使用值，什么时候使用的是引用呢？  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本类型&lt;/strong&gt;是&lt;strong&gt;使用值&lt;/strong&gt;的操作。&lt;br&gt;&lt;strong&gt;引用类型&lt;/strong&gt;是&lt;strong&gt;使用引用&lt;/strong&gt;操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用值进行上面3个操作：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b=a;&lt;span class=&quot;comment&quot;&gt;//使用值的复制，创建的b是一个独立的副本值和a一样。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;useV&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;_a,_b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _a=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _b=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//上面对值的修改不会影响到函数外部的a,b的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useV(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a==b)&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用引用进行上面3个操作：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这里a的值不是&amp;#123;&#39;name&#39;:&#39;mrluo&#39;,num:1&amp;#125;这个对象内容，而是这个&amp;#123;&#39;name&#39;:&#39;mrluo&#39;,num:1&amp;#125;对象的一个引用（相当于内存地址）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;mrluo&#39;&lt;/span&gt;,num:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个复制的操作，实际是把原来&amp;#123;&#39;name&#39;:&#39;mrluo&#39;,num:1&amp;#125;这个对象的引用复制给了b,所以b的值存的是一个引用信息。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b=a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//传参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;useObj&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;_a,_b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//对这个引用对象属性的修改，会影响到函数外部。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _a.name=&lt;span class=&quot;string&quot;&gt;&#39;mrsluo&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _b=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.name) &lt;span class=&quot;comment&quot;&gt;// mrluo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useObj(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a.name) &lt;span class=&quot;comment&quot;&gt;// mrsluo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//比较,这里虽然对象的属性值变化了，（mrluo-&amp;gt;mrsluo）,但是对象的引用不变所以比较的时候是相同的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a==b)&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// example 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;useObj2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;_a,_b&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//对这个引用赋值为Array(1,2,3)的引用，这个时候外部的a是不会受到影响的。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _a=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useObj2(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//函数外部的数据是不受到影响的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a) &lt;span class=&quot;comment&quot;&gt;//&amp;#123;&#39;name&#39;:&#39;mrsluo&#39;,num:1&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// example 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b) &lt;span class=&quot;comment&quot;&gt;//&amp;#123;&#39;name&#39;:&#39;mrsluo&#39;,num:1&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//修改引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b) &lt;span class=&quot;comment&quot;&gt;//[1,2,3];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过上面的example2和3可以看出，在使用引用传递参数的时候实际传递的是一个引用的副本，拿example2来说：&lt;br&gt;在调用useObj2(a,b)的时候，a的值就是{‘name’:’mrluo’,num:1}这个对象的引用(存的是这个对象的地址)，我们假设是0X123，&lt;br&gt;在函数内部_a的值是函数外面a复制的一个副本，值也是0x123，这个时候如果在函数内部把_a的值重新赋值为数组的引用假设是0x456,这个时候外部a的值依然是0x123。&lt;br&gt;&lt;strong&gt;因为函数内部的_a修改的是_a这个变量的值（0x123修改为0x456），而不是_a这个变量值（0x123）对应的原始对象的值，所以这个不影响外部的a值（因为a的值依然是0x123，对应的依然是0x123这个地址的对象）。&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通俗的说：假设对象{‘name’:’mrluo’,num:1}是一个房间，a存的是这个房间的钥匙，调用函数的时候相当于a把这个钥匙配多了一副给了_a.&lt;br&gt;这个时候函数内部的操作，就相当于_a原来存的是a给的钥匙，现在存的是Array给的钥匙，所以a,和_a是没有关系了。拿的钥匙不同当然可以开启的房间也不一样了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面整理成表格：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;复制使用&lt;/th&gt;
&lt;th&gt;传递使用&lt;/th&gt;
&lt;th&gt;比较使用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数字&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔值&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;不可变&lt;/td&gt;
&lt;td&gt;不可变&lt;/td&gt;
&lt;td&gt;值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;对象&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这里解释一下字符串，不可变的意思,是指在js中字符串中的字符是无法改变的.例如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;string&quot;&gt;&quot;abcdefg&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;span class=&quot;comment&quot;&gt;//&quot;abcdefg&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=&lt;span class=&quot;string&quot;&gt;&quot;e&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;span class=&quot;comment&quot;&gt;//依然是“abcdefg”,并不是“ebcdefg”;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于字符串是无法改变的，所以鉴别字符串的复制和传递是使用值还是引用就变得没有意义了..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h3&gt;&lt;p&gt;在JavaScript中，变量的作用域分为全局和局部。在函数内部声明的变量，作用域就只在函数内部有定义，称为局部变量。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果全局的变量和局部的变量同名，则局部的优先级别高  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在JavaScript中，没有块级的作用域（这个一定要清楚），下面看例子：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope=&lt;span class=&quot;string&quot;&gt;&quot;global&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(scope);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope=&lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(scope);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的程序，第一个console会认为是global,因为在函数内部scope还没有声明赋值，所以使用的是函数外部的全局的变量。&lt;br&gt;但是结果不是这样。第一个输出是undefined，为什么结果跟我们猜想的有出入，这个就是js没有块级作用域导致的。&lt;br&gt;对于上面的程序来说，无论scope在函数体内的哪一行声明，程序解析的时候都会把这个声明放到前面，变成这样:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scope;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(scope);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  scope=&lt;span class=&quot;string&quot;&gt;&quot;local&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(scope);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以第一个console输出的是一个声明但是还未赋值（默认是undefined）的scope变量，所以输出是undefined，所以这里养成一个习惯把声明放到最前面。&lt;br&gt;其实还可以做个试验看看&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;span class=&quot;comment&quot;&gt;//讲道理这里输出的时候因为还没有执行到下面的声明，应该会出现异常，但是这里输出的是undefined。就是说在程序解析的时候会把声明放到前面。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a;&lt;span class=&quot;comment&quot;&gt;//如果这里的var去掉，则上面就会异常。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从上面的程可以看出来，在声明局部的变量时候一定要使用var语句,不然会造成全局空间的污染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript权威指南4版&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;整理js数据类型相关的资料，方便以后查阅&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;p&gt;根据js对值的操作规则可以来区分成2个大类，分别是基本类型和引用类型。  &lt;/p&gt;
&lt;h4 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h4&gt;&lt;p&gt;成员：数字、文本字符串、布尔值、null和undefined。&lt;br&gt;存储：在存储的角度来说它拥有固定的大小，例如一个数值在内存中占八个字节，而一个布尔值就一位。&lt;br&gt;判断类型：使用typeof()&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));   &lt;span class=&quot;comment&quot;&gt;// number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;));   &lt;span class=&quot;comment&quot;&gt;// number--特别注意&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));  &lt;span class=&quot;comment&quot;&gt;// boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;));  &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h4&gt;&lt;p&gt;成员：对象、数组、函数。&lt;br&gt;存储：引用类型可以有任意的长度，它并没有固定大小，所以存储值的时候不能指定空间大小存储，所以存放的是&lt;code&gt;指针&lt;/code&gt;或者&lt;code&gt;内存地址&lt;/code&gt;。  &lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="js数据类型" scheme="http://yoursite.com/tags/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到coding</title>
    <link href="http://yoursite.com/2016/03/28/hexo%E9%83%A8%E7%BD%B2%E5%88%B0coding/"/>
    <id>http://yoursite.com/2016/03/28/hexo部署到coding/</id>
    <published>2016-03-28T06:13:39.000Z</published>
    <updated>2016-04-13T10:11:19.096Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于使用github有时访问很慢,所以就把主页托管的到coding上，下面记录一下转移的方法。&lt;/p&gt;
&lt;h3 id=&quot;step-1-修改主站配置&quot;&gt;&lt;a href=&quot;#step-1-修改主站配置&quot; class=&quot;headerlink&quot; title=&quot;step 1 修改主站配置&quot;&gt;&lt;/a&gt;step 1 修改主站配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;配置主站&lt;/code&gt;的_config.yml,修改deploy的repo。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: git@git.coding.net:mrluos/mrluos.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;&lt;p&gt;这里配置使用ssh的方式，使用https部署的时候总是有问题。&lt;/p&gt;
&lt;/blockquote&gt;  
&lt;h3 id=&quot;step-2-创建coding的仓库。&quot;&gt;&lt;a href=&quot;#step-2-创建coding的仓库。&quot; class=&quot;headerlink&quot; title=&quot;step 2 创建coding的仓库。&quot;&gt;&lt;/a&gt;step 2 创建coding的仓库。&lt;/h3&gt;&lt;p&gt;1.首先到&lt;a href=&quot;https://coding.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coding&lt;/a&gt;注册一个账号并且激活，然后创建一个（公开类型）项目仓库。&lt;br&gt;2.在本地生成一个ssh的key.&lt;a href=&quot;/2016/03/24/hexo发布到github&quot;&gt;如何生成？&lt;/a&gt;。&lt;br&gt;3.添加ssh key 到coding。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;由于coding的规则，这里的ssh key是添加到账户下的ssh公匙，不是项目的。&lt;br&gt;具体操作: &lt;code&gt;账户&lt;/code&gt;-&amp;gt;&lt;code&gt;SSH公匙&lt;/code&gt;-&amp;gt;&lt;code&gt;添加&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;添加完成以后就可以部署到coding上面了。&lt;/p&gt;
&lt;h3 id=&quot;step-3-添加演示&quot;&gt;&lt;a href=&quot;#step-3-添加演示&quot; class=&quot;headerlink&quot; title=&quot;step 3 添加演示&quot;&gt;&lt;/a&gt;step 3 添加演示&lt;/h3&gt;&lt;p&gt;上面部署完成之后,还不能直接访问需要添加一个演示。&lt;br&gt;1.在coding中切换到项目,点击&lt;code&gt;演示&lt;/code&gt;,点击&lt;code&gt;开始检测&lt;/code&gt;选择演示内存，服务器选择香港，然后&lt;code&gt;开启演示&lt;/code&gt;。&lt;br&gt;2.修改域名为仓库名.coding.io,编译部署-&amp;gt;选择高级选项，选择运行环境html,勾选自动部署，然后点击&lt;code&gt;一键部署&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;step-4-自动更新演示&quot;&gt;&lt;a href=&quot;#step-4-自动更新演示&quot; class=&quot;headerlink&quot; title=&quot;step 4 自动更新演示&quot;&gt;&lt;/a&gt;step 4 自动更新演示&lt;/h3&gt;&lt;p&gt;在每次提交更新的时候能自动更新演示平台的代码，需要添加webhook.&lt;br&gt;1.点击项目仓库的&lt;code&gt;设置&lt;/code&gt;，有个&lt;code&gt;webhook&lt;/code&gt;的选项。&lt;br&gt;url   填写你的站点访问的地址例如我的：&lt;a href=&quot;http://mrluos.coding.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mrluos.coding.io/&lt;/a&gt;,然后加入一个‘_’下划线。&lt;br&gt;token 填写{{TOKEN}}&lt;br&gt;2.点击&lt;code&gt;演示&lt;/code&gt;菜单，点击&lt;code&gt;环境变量&lt;/code&gt;，变量名：WEBHOOK_TOKEN，值：{{TOKEN}}  ，点击添加。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于使用github有时访问很慢,所以就把主页托管的到coding上，下面记录一下转移的方法。&lt;/p&gt;
&lt;h3 id=&quot;step-1-修改主站配置&quot;&gt;&lt;a href=&quot;#step-1-修改主站配置&quot; class=&quot;headerlink&quot; title=&quot;step 1 修改主站配置&quot;&gt;&lt;/a&gt;step 1 修改主站配置&lt;/h3&gt;&lt;p&gt;&lt;code&gt;配置主站&lt;/code&gt;的_config.yml,修改deploy的repo。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: git@git.coding.net:mrluos/mrluos.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog部署" scheme="http://yoursite.com/tags/blog%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo NexT主题的配置和修改</title>
    <link href="http://yoursite.com/2016/03/25/hexo-NexT%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BF%AE%E6%94%B9/"/>
    <id>http://yoursite.com/2016/03/25/hexo-NexT主题的配置和修改/</id>
    <published>2016-03-25T04:19:44.000Z</published>
    <updated>2016-04-13T10:11:03.868Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过前面（&lt;a href=&quot;/2016/03/23/hexo替换皮肤&quot;&gt;hexo替换皮肤&lt;/a&gt;）的搭建，现在已经能够自由的替换不同的Style了，但是不同的主题都提供一个主题的配置,这篇文章是记录NexT主题的配置和修改。&lt;/p&gt;
&lt;h3 id=&quot;修改配置&quot;&gt;&lt;a href=&quot;#修改配置&quot; class=&quot;headerlink&quot; title=&quot;修改配置&quot;&gt;&lt;/a&gt;修改配置&lt;/h3&gt;&lt;p&gt;下面介绍一些基本的配置的修改，打开next/_config.yml文件：  &lt;/p&gt;
&lt;h4 id=&quot;1-设置favicon-icon？&quot;&gt;&lt;a href=&quot;#1-设置favicon-icon？&quot; class=&quot;headerlink&quot; title=&quot;1.设置favicon.icon？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.设置favicon.icon？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;把favicon.ico放到站点的source的目录下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-设置站点的成立时间？&quot;&gt;&lt;a href=&quot;#2-设置站点的成立时间？&quot; class=&quot;headerlink&quot; title=&quot;2.设置站点的成立时间？&quot;&gt;&lt;/a&gt;&lt;strong&gt;2.设置站点的成立时间？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;在文件中找到#since节点，填写一个时间即可,例如：since: 2015  &lt;/p&gt;
&lt;h4 id=&quot;3-配置菜单栏目&quot;&gt;&lt;a href=&quot;#3-配置菜单栏目&quot; class=&quot;headerlink&quot; title=&quot;3.配置菜单栏目?&quot;&gt;&lt;/a&gt;&lt;strong&gt;3.配置菜单栏目?&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;menu:  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  home: /  s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  categories: /categories  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#about: /about  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  archives: /archives  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tags: /tags  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#commonweal: /404.html  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  XXX: /路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;&lt;p&gt;若站点运行在子目录中，请将链接前缀的 / 去掉&lt;br&gt;默认只有archives和home目录页面，其他的页面需要自己创建&lt;/p&gt;
&lt;/blockquote&gt;  
&lt;p&gt;创建不存在的page&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new page about &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new page categories&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new page tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;404页面只需要在source/下新建一个404.html即可。  &lt;/p&gt;
&lt;h4 id=&quot;4-添加categories和tags目录页的内容&quot;&gt;&lt;a href=&quot;#4-添加categories和tags目录页的内容&quot; class=&quot;headerlink&quot; title=&quot;4.添加categories和tags目录页的内容?&quot;&gt;&lt;/a&gt;&lt;strong&gt;4.添加categories和tags目录页的内容?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;hexo new page XXXX&lt;/code&gt; 创建的页面默认是没有填充内容，如何自动统计当前站点的所有的categories或者tags，并展示出所有的内容呢?&lt;br&gt;1.打开/source/tags/index.md在— 和—之间加入一个type:tags&lt;br&gt;2.打开/source/categories/index.md在— 和—之间加入一个type:categories&lt;br&gt;例如这样&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: categories (如果是tags页，这里就写tags.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2016-03-25 14:51:12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: categories (如果是tags页，这里就写tags.)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-切换不同的主题&quot;&gt;&lt;a href=&quot;#5-切换不同的主题&quot; class=&quot;headerlink&quot; title=&quot;5.切换不同的主题?&quot;&gt;&lt;/a&gt;&lt;strong&gt;5.切换不同的主题?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;找到&lt;code&gt;scheme&lt;/code&gt;配置节点，可选值有 Muse| Mist| Pisces。  &lt;/p&gt;
&lt;h4 id=&quot;6-设置自己的头像&quot;&gt;&lt;a href=&quot;#6-设置自己的头像&quot; class=&quot;headerlink&quot; title=&quot;6.设置自己的头像?&quot;&gt;&lt;/a&gt;&lt;strong&gt;6.设置自己的头像?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;找到custom_logo配置节点，在&lt;code&gt;image&lt;/code&gt;后面填写头像的链接&lt;/p&gt;
&lt;h4 id=&quot;7-设置代码高亮&quot;&gt;&lt;a href=&quot;#7-设置代码高亮&quot; class=&quot;headerlink&quot; title=&quot;7.设置代码高亮?&quot;&gt;&lt;/a&gt;&lt;strong&gt;7.设置代码高亮?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;找到&lt;code&gt;highlight_theme&lt;/code&gt;配置节点，可以选择normal | night | night eighties | night blue | night bright。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（完）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT Doc&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过前面（&lt;a href=&quot;/2016/03/23/hexo替换皮肤&quot;&gt;hexo替换皮肤&lt;/a&gt;）的搭建，现在已经能够自由的替换不同的Style了，但是不同的主题都提供一个主题的配置,这篇文章是记录NexT主题的配置和修改。&lt;/p&gt;
&lt;h3 id=&quot;修改配置&quot;&gt;&lt;a href=&quot;#修改配置&quot; class=&quot;headerlink&quot; title=&quot;修改配置&quot;&gt;&lt;/a&gt;修改配置&lt;/h3&gt;&lt;p&gt;下面介绍一些基本的配置的修改，打开next/_config.yml文件：  &lt;/p&gt;
&lt;h4 id=&quot;1-设置favicon-icon？&quot;&gt;&lt;a href=&quot;#1-设置favicon-icon？&quot; class=&quot;headerlink&quot; title=&quot;1.设置favicon.icon？&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.设置favicon.icon？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;把favicon.ico放到站点的source的目录下。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="hexo主题" scheme="http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo替换皮肤</title>
    <link href="http://yoursite.com/2016/03/25/hexo%E6%9B%BF%E6%8D%A2%E7%9A%AE%E8%82%A4/"/>
    <id>http://yoursite.com/2016/03/25/hexo替换皮肤/</id>
    <published>2016-03-25T03:39:24.000Z</published>
    <updated>2016-04-13T10:10:37.507Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过前面（&lt;a href=&quot;/2016/03/23/hexo基本搭建&quot;&gt;hexo基本搭建&lt;/a&gt; &lt;a href=&quot;/2016/03/24/hexo发布到github&quot;&gt;hexo发布到github&lt;/a&gt;）的折腾，现在已经把个人的站点搭建起来了，同时也能发布到github上，这篇文章记录一下如果看不顺眼站点的布局想要换一个该如何操作。 &lt;/p&gt;
&lt;h3 id=&quot;开始改变&quot;&gt;&lt;a href=&quot;#开始改变&quot; class=&quot;headerlink&quot; title=&quot;开始改变&quot;&gt;&lt;/a&gt;开始改变&lt;/h3&gt;&lt;h4 id=&quot;step-1-选择主题&quot;&gt;&lt;a href=&quot;#step-1-选择主题&quot; class=&quot;headerlink&quot; title=&quot;step 1 选择主题&quot;&gt;&lt;/a&gt;step 1 选择主题&lt;/h4&gt;&lt;p&gt;从&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官方皮肤&lt;/a&gt;里找到你心仪的主题样式，这里我使用的&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-2-安装主题&quot;&gt;&lt;a href=&quot;#step-2-安装主题&quot; class=&quot;headerlink&quot; title=&quot;step 2 安装主题&quot;&gt;&lt;/a&gt;step 2 安装主题&lt;/h4&gt;&lt;p&gt; 打开&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;的github项目主页，这里提供2种安装的方法：&lt;br&gt;&lt;strong&gt;plan A&lt;/strong&gt;&lt;br&gt;git clone ,打开git终端定位到你的站点，然后使用clone。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; your-web-site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/iissnan/hexo-theme-next themes/next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;plan B&lt;/strong&gt;&lt;br&gt;下载稳定版本的主题文件&lt;br&gt;1.从&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发布版本&lt;/a&gt;下载next主题Source Code (zip)，然后解压出来。&lt;br&gt;2.在你的站点的themes目录下新建一个next文件夹。&lt;br&gt;3.复制next文件夹内的所有文件到你的站点目录themes/next/里面。&lt;/p&gt;
&lt;h4 id=&quot;step-3-配置&quot;&gt;&lt;a href=&quot;#step-3-配置&quot; class=&quot;headerlink&quot; title=&quot;step 3 配置&quot;&gt;&lt;/a&gt;step 3 配置&lt;/h4&gt;&lt;p&gt;操作完成上面的步骤后，接着是配置使用下载的皮肤。&lt;br&gt;打开主站根目录下的_config.yml文件，在theme配置节点启用next.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;theme: next&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后重新生成和启动服务查看效果&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此就完成了皮肤的更换。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（完）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT Doc&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过前面（&lt;a href=&quot;/2016/03/23/hexo基本搭建&quot;&gt;hexo基本搭建&lt;/a&gt; &lt;a href=&quot;/2016/03/24/hexo发布到github&quot;&gt;hexo发布到github&lt;/a&gt;）的折腾，现在已经把个人的站点搭建起来了，同时也能发布到github上，这篇文章记录一下如果看不顺眼站点的布局想要换一个该如何操作。 &lt;/p&gt;
&lt;h3 id=&quot;开始改变&quot;&gt;&lt;a href=&quot;#开始改变&quot; class=&quot;headerlink&quot; title=&quot;开始改变&quot;&gt;&lt;/a&gt;开始改变&lt;/h3&gt;&lt;h4 id=&quot;step-1-选择主题&quot;&gt;&lt;a href=&quot;#step-1-选择主题&quot; class=&quot;headerlink&quot; title=&quot;step 1 选择主题&quot;&gt;&lt;/a&gt;step 1 选择主题&lt;/h4&gt;&lt;p&gt;从&lt;a href=&quot;https://hexo.io/themes/&quot;&gt;hexo官方皮肤&lt;/a&gt;里找到你心仪的主题样式，这里我使用的&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;NexT&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="hexo主题" scheme="http://yoursite.com/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>hexo发布到github</title>
    <link href="http://yoursite.com/2016/03/24/hexo%E5%8F%91%E5%B8%83%E5%88%B0github/"/>
    <id>http://yoursite.com/2016/03/24/hexo发布到github/</id>
    <published>2016-03-24T09:52:22.000Z</published>
    <updated>2016-04-13T10:11:26.538Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过&lt;a href=&quot;/2016/03/23/hexo基本搭建&quot;&gt;hexo基本搭建&lt;/a&gt;完成了基本的hexo环境的搭建和本地浏览。&lt;br&gt;这篇文章记录如何结合github实现免费的个人站点的搭建。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;github仓库创建&quot;&gt;&lt;a href=&quot;#github仓库创建&quot; class=&quot;headerlink&quot; title=&quot;github仓库创建&quot;&gt;&lt;/a&gt;github仓库创建&lt;/h3&gt;&lt;p&gt;首先打开&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git主页&lt;/a&gt;&lt;br&gt;注册一个账号，然后创建（点击+ new repositories按钮）一个github用户名.github.io的仓库。&lt;br&gt;例如我的是&lt;code&gt;mrluos.github.io&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置hexo&quot;&gt;&lt;a href=&quot;#配置hexo&quot; class=&quot;headerlink&quot; title=&quot;配置hexo&quot;&gt;&lt;/a&gt;配置hexo&lt;/h3&gt;&lt;h4 id=&quot;step1&quot;&gt;&lt;a href=&quot;#step1&quot; class=&quot;headerlink&quot; title=&quot;step1&quot;&gt;&lt;/a&gt;step1&lt;/h4&gt;&lt;p&gt;打开站点目录下的_config.yml文件,找到deploy节点配置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repo: git@github.com:mrluos/mrluos.github.io.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  branch: master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;repo就是刚才创建的以你用户名字为仓库的连接。&lt;/p&gt;
&lt;h4 id=&quot;step2&quot;&gt;&lt;a href=&quot;#step2&quot; class=&quot;headerlink&quot; title=&quot;step2&quot;&gt;&lt;/a&gt;step2&lt;/h4&gt;&lt;p&gt;生成ssh访问的key   &lt;/p&gt;
&lt;h4 id=&quot;1-查看是否存在ssh-key&quot;&gt;&lt;a href=&quot;#1-查看是否存在ssh-key&quot; class=&quot;headerlink&quot; title=&quot;1.查看是否存在ssh key&quot;&gt;&lt;/a&gt;&lt;code&gt;1.查看是否存在ssh key&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在站点文件的根目录下，右键鼠标点击&lt;code&gt;Git Branch Here&lt;/code&gt;,打开git的命令行窗口&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ll ~/.ssh/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果有id_rsa、id_rsa.pub文件，说明存在了ssh key.删除.&lt;/p&gt;
&lt;h4 id=&quot;2-生成ssh-key&quot;&gt;&lt;a href=&quot;#2-生成ssh-key&quot; class=&quot;headerlink&quot; title=&quot;2.生成ssh key&quot;&gt;&lt;/a&gt;&lt;code&gt;2.生成ssh key&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;输入以下code,在-C后面替换成你的邮箱（github注册时候的邮箱账号），然后回车。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -b 4096 -C &lt;span class=&quot;string&quot;&gt;&quot;example@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;会出现提示，要求输入保存key的文件和key的密码，可以直接一路回车直接默认，密码回车为空,至此key生成完毕。&lt;/p&gt;
&lt;h4 id=&quot;3-加入ssh-agent&quot;&gt;&lt;a href=&quot;#3-加入ssh-agent&quot; class=&quot;headerlink&quot; title=&quot;3.加入ssh-agent&quot;&gt;&lt;/a&gt;&lt;code&gt;3.加入ssh-agent&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;添加ssh key 到ssh-agent.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; $(ssh-agent &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;回车会出现Agent pid XXXXX。说明加入成功了。&lt;/p&gt;
&lt;h4 id=&quot;step-3&quot;&gt;&lt;a href=&quot;#step-3&quot; class=&quot;headerlink&quot; title=&quot;step 3&quot;&gt;&lt;/a&gt;step 3&lt;/h4&gt;&lt;p&gt;上面的操作是配置本地的文件和生成ssh 访问key.接下来是把本地生成的key.添加到github账户上,在上面的终端里输入拷贝命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后登陆到github里，打开创建的你名字的.github.io的仓库找1.&lt;code&gt;setting&lt;/code&gt;-&amp;gt;&lt;code&gt;Deploy keys&lt;/code&gt;-&amp;gt;&lt;code&gt;add deploy key&lt;/code&gt;.&lt;br&gt;输入title（随意）key,粘贴上面复制的key.然后点击&lt;code&gt;Add key&lt;/code&gt;.至此添加ssh key.操作完成。&lt;br&gt;回到终端。输入命令测试是否连接成功了。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;出现如下提示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hi xxx/xxx.github.io! You&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;说明可以成功连接了...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上配置是为了把hexo生成的文件发布到你的github主页上。发布方法就是hexo d,发布前一般是先清理然后重新生成最后发布。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//清理后重新生成然后再本地查看效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//如果没有问题则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(完)&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/checking-for-existing-ssh-keys/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;GitHub Help&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;通过&lt;a href=&quot;/2016/03/23/hexo基本搭建&quot;&gt;hexo基本搭建&lt;/a&gt;完成了基本的hexo环境的搭建和本地浏览。&lt;br&gt;这篇文章记录如何结合github实现免费的个人站点的搭建。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="blog部署" scheme="http://yoursite.com/tags/blog%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo基本搭建</title>
    <link href="http://yoursite.com/2016/03/23/hexo%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/03/23/hexo基本搭建/</id>
    <published>2016-03-23T03:12:41.000Z</published>
    <updated>2016-04-13T08:30:56.563Z</updated>
    
    <content type="html">&lt;h3 id=&quot;hexo是什么鬼？&quot;&gt;&lt;a href=&quot;#hexo是什么鬼？&quot; class=&quot;headerlink&quot; title=&quot;hexo是什么鬼？&quot;&gt;&lt;/a&gt;hexo是什么鬼？&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;h3 id=&quot;如何安装？&quot;&gt;&lt;a href=&quot;#如何安装？&quot; class=&quot;headerlink&quot; title=&quot;如何安装？&quot;&gt;&lt;/a&gt;如何安装？&lt;/h3&gt;&lt;h4 id=&quot;安装hexo前准备&quot;&gt;&lt;a href=&quot;#安装hexo前准备&quot; class=&quot;headerlink&quot; title=&quot;安装hexo前准备&quot;&gt;&lt;/a&gt;安装hexo前准备&lt;/h4&gt;&lt;p&gt;在安装hexo前需要准备的大环境是&lt;br&gt;Git &lt;a href=&quot;https://git-scm.com/download/win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何安装git&lt;/a&gt;&lt;br&gt;node.js &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何安装nodejs.js&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h4&gt;&lt;p&gt;首先打开node.js的命令行工具Node.js command prompt&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;等待安装完毕后，就可以使用hexo的命令了,下面使用hexo新建一个站点&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init myweb //初始化一个hexo的站点目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; myweb &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install //安装站点需要的文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;等待站点安装完毕,文件的目录如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml//站点的主要配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json//应用程序的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scaffolds//模板文件，默认包含了 post ,page,draft.(可以自定义模板到这个文件内)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;//源码文件，资源文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   ├── _drafts//草稿箱，可以存私人的日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   └── _posts//文章的存放目录，在这个目录下会出现一个public的子目录存放发布的文章&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes//站点的样式（皮肤）目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;如何使用hexo？&quot;&gt;&lt;a href=&quot;#如何使用hexo？&quot; class=&quot;headerlink&quot; title=&quot;如何使用hexo？&quot;&gt;&lt;/a&gt;如何使用hexo？&lt;/h4&gt;&lt;p&gt;hexo提供了几个命令分别是&lt;br&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new [layout] &amp;lt;title&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;layout布局	文件路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post	    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/_posts 文章模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page	    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;  页面模式,生成的是独立的页面，默认是不出现在主页的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draft	    &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/_drafts 草稿箱模式，默认是不会显示出来的。可以通过hexo publish [layout] &amp;lt;title&amp;gt; 设置到&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;/_posts。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;新建文章，其中layout是布局,如何不设置layout 的话，默认使用 _config.yml 中的 default_layout 参数代替，title是文章的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&#39;my first art&#39;&lt;/span&gt; //使用默认的布局新建一个文章&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;generate&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo generate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;生成静态文件。意思就是把使用markdown编写的文件生成一个静态的html文件，其中参数&lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; 和-w&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选项	描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt;, --deploy	文件生成后立即部署网站&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-w, --watch	监视文件变动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以不带参数执行，这个命令还支持简写模式，即&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;public&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo publish [layout] &amp;lt;filename&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;发表草稿，意思是把草稿(_drafts)箱的文章移动到发布的文章(_posts)里,同时也能移动到page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令还支持简写模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo p&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;server&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动服务器。默认情况下，访问网址为： http://localhost:4000/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;选项	描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-p, --port	重设端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;, --static	只使用静态文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt;, --log	启动日记记录，使用覆盖记录格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令还支持简写模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;deploy&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo deploy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;部署网站。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参数	描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-g, --generate	部署之前预先生成静态文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令还支持简写模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;render&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo render &amp;lt;file1&amp;gt; [file2] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;渲染文件，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;参数	描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-o, --output	设置输出路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令还支持简写模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;migrate&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo migrate &amp;lt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从其他博客系统,迁移内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/migration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何迁移内容？&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo migrate &amp;lt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;列出站点的资源有哪些&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;支持以下几种&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post 列出所有的文章列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;page 页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;route 列出整个站点的资源的一个路由结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tag  列出所有tag，和统计tag出现的次数，以及路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;category 列出站点的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令支持简写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;version&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;显示版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;命令支持简写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的命令介绍完以后，下面演示一下常用的命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;清理文件然后重新生成静态文件，最后开启本地的服务器，这个时候访问&lt;a href=&quot;http://localhost:4000就会看到主页。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000就会看到主页。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hexo是什么鬼？&quot;&gt;&lt;a href=&quot;#hexo是什么鬼？&quot; class=&quot;headerlink&quot; title=&quot;hexo是什么鬼？&quot;&gt;&lt;/a&gt;hexo是什么鬼？&lt;/h3&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;h3 id=&quot;如何安装？&quot;&gt;&lt;a href=&quot;#如何安装？&quot; class=&quot;headerlink&quot; title=&quot;如何安装？&quot;&gt;&lt;/a&gt;如何安装？&lt;/h3&gt;&lt;h4 id=&quot;安装hexo前准备&quot;&gt;&lt;a href=&quot;#安装hexo前准备&quot; class=&quot;headerlink&quot; title=&quot;安装hexo前准备&quot;&gt;&lt;/a&gt;安装hexo前准备&lt;/h4&gt;&lt;p&gt;在安装hexo前需要准备的大环境是&lt;br&gt;Git &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;如何安装git&lt;/a&gt;&lt;br&gt;node.js &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;如何安装nodejs.js&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>grunt基础安装篇</title>
    <link href="http://yoursite.com/2016/03/22/grunt%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E7%AF%87/"/>
    <id>http://yoursite.com/2016/03/22/grunt基础安装篇/</id>
    <published>2016-03-22T07:28:37.000Z</published>
    <updated>2016-04-13T10:09:52.641Z</updated>
    
    <content type="html">&lt;h3 id=&quot;win-环境下-grunt-安装使用纪要&quot;&gt;&lt;a href=&quot;#win-环境下-grunt-安装使用纪要&quot; class=&quot;headerlink&quot; title=&quot;win 环境下 grunt 安装使用纪要&quot;&gt;&lt;/a&gt;win 环境下 grunt 安装使用纪要&lt;/h3&gt;&lt;p&gt;grunt是一款前端自动化的神器，今天记录一下使用的方法。&lt;br&gt;首先要清楚的是grunt是基于nodejs为前提的一个插件，所以如果没有安装nodejs.可以先下载安装。&lt;br&gt;这里假设已经安装完了nodejs,然后我们打开nodejs的命令行程序（记得要使用管理员的权限运行），下面开始安装grunt.  &lt;/p&gt;
&lt;h3 id=&quot;安装grunt的命令行插件grunt-cli&quot;&gt;&lt;a href=&quot;#安装grunt的命令行插件grunt-cli&quot; class=&quot;headerlink&quot; title=&quot;安装grunt的命令行插件grunt-cli&quot;&gt;&lt;/a&gt;安装grunt的命令行插件grunt-cli&lt;/h3&gt;&lt;p&gt;安装时候使用-g参数进行全局的安装，把插件安装到全局的环境中(npm get prefix 查看全局环境的路径)。  在nodejs cmd 里面输入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g  grunt-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后在cmd里输入：grunt 会出现如下的提示，说明grunt-cli安装成功了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/1.png&quot; alt=&quot;1.png&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;建立项目实践使用&quot;&gt;&lt;a href=&quot;#建立项目实践使用&quot; class=&quot;headerlink&quot; title=&quot;建立项目实践使用&quot;&gt;&lt;/a&gt;建立项目实践使用&lt;/h3&gt;&lt;p&gt;首先建立一个文件夹grunttest,然后在这个文件内建立Gruntfile.js、package.json,最后cmd切换到这个目录里,然后在package.json目前文件的大纲是这样的：&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/3.png&quot; alt=&quot;3.png&quot; title=&quot;&quot;&gt;&lt;br&gt;然后往package.json里面输如下内容：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;grunttest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;指定了应用的名称、版本，还有一个开发依赖的集合，这里还可以填充作者，项目的描述等等的内容，填充完成以后我们开始安装grunt.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;img src=&quot;/2016/03/22/grunt基础安装篇/4.png&quot; alt=&quot;4.png&quot; title=&quot;&quot;&gt;  
&lt;p&gt;多了一个node_modules.文件夹这个是插件的存放目录，然后再看看package.json可以发现内容变成如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;grunttest&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;grunt&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.4.5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到在开发依赖中多了一个grunt 的项，说明了当前这个应用所依赖的的grunt的版本信息。&lt;br&gt;接着在cmd中输入grunt看看发生了什么&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/5.png&quot; alt=&quot;5.png&quot; title=&quot;&quot;&gt;&lt;br&gt;警告，没有找到默认的任务。这个意思是说你键入了grunt命令但是grunt没有任务可以执行，所以下面开始建立任务。&lt;/p&gt;
&lt;h3 id=&quot;给grunt装入一个心脏（Gruntfile-js的填充）&quot;&gt;&lt;a href=&quot;#给grunt装入一个心脏（Gruntfile-js的填充）&quot; class=&quot;headerlink&quot; title=&quot;给grunt装入一个心脏（Gruntfile.js的填充）&quot;&gt;&lt;/a&gt;给grunt装入一个心脏（Gruntfile.js的填充）&lt;/h3&gt;&lt;p&gt;首先介绍Gruntfile.js从文件的名字可以看出这个是用来告诉grunt要干啥的文件，配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports=&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(grunt)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //grunt初始化配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.initConfig(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //获取 package.json的配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pkg:grunt.file.readJSON(&lt;span class=&quot;string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在这里加入grunt的任务，就是在cmd下输入grunt后，grunt要执行的东西。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //这里根据任务的先后顺序执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,[]);/*现在知道为啥刚开始grunt,提示没有默认的任务。*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们再来输入grunt。看看&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/6.png&quot; alt=&quot;6.png&quot; title=&quot;&quot;&gt;&lt;br&gt;成功了。写到这里发现，这个grunt说好的自动化呢，怎么一点感觉都没有，哈哈接着往下走。&lt;/p&gt;
&lt;h3 id=&quot;给Grunt招兵买马&quot;&gt;&lt;a href=&quot;#给Grunt招兵买马&quot; class=&quot;headerlink&quot; title=&quot;给Grunt招兵买马&quot;&gt;&lt;/a&gt;给Grunt招兵买马&lt;/h3&gt;&lt;p&gt;折腾了那么久现在还不知道grunt的厉害之处，对grunt来说它并不能直接实现具体的功能，它是一个管理的角色，负责协调和运行各个插件（也就是前面说的grunt.registerTask），具体的功能需要小弟（插件）去做，在grunt的官网中有很多的插件（自动化，混淆代码，语法检查等等），插件有些是contrib开头的有些不是，区别是contrib开头的是官方团队写的，其他的是第三方提供的，接下来熟悉一下如何使用grunt插件。  &lt;/p&gt;
&lt;h4 id=&quot;代码混淆和压缩（contrib-unlify）&quot;&gt;&lt;a href=&quot;#代码混淆和压缩（contrib-unlify）&quot; class=&quot;headerlink&quot; title=&quot;代码混淆和压缩（contrib-unlify）&quot;&gt;&lt;/a&gt;代码混淆和压缩（contrib-unlify）&lt;/h4&gt;&lt;p&gt;这个插件主要是实现代码的混淆和压缩，在发布应用的时候我们并不希望别人能直接看到我们的代码逻辑，所以需要混淆，压缩则是为了节省带宽使页面打开更快，我们来实践一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-contrib-uglify --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还记得–save-dev嘛？添加到pkg中的开发依赖，所以安装完成以后package.json的Devpendencies会多一个”grunt-contrib-uglify”的信息。&lt;br&gt;安装了插件我们要如何使用它？&lt;/p&gt;
&lt;p&gt;首先在grunttest目录内加入一个src文件夹（源代码文件），然后在src下建立一个test.js,随意输入一些内容：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(win)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var total=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(window);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后保存，接着我们再建立一个dest文件夹最为输出的文件的目录，最后我们要让grunt来运行这个插件，所以需要在Gruntfile.js中配置：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uglify:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //uglify的更多配置查看官网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //这里的pkg 就是上面读取的package.json的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stripBanners:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //banner，压缩后显示的描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            banner: &lt;span class=&quot;string&quot;&gt;&#39;/*!  - v- */&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        build:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //这里可以使用src/*.js，表示src下的所有js都压缩混淆，还可以使用!*.min.js,表示排除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            src:&lt;span class=&quot;string&quot;&gt;&#39;src/test.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dest:&lt;span class=&quot;string&quot;&gt;&#39;dest/-.min.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这段配置加入到，grunt.initConfig({里面})，这个只是让grunt知道执行uglify的时候使用什么规则，具体的执行还需把这个插件加入到上面说的“任务”中代码如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整的配置如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports=&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(grunt)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //grunt初始化配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.initConfig(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //获取 package.json的配置信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pkg:grunt.file.readJSON(&lt;span class=&quot;string&quot;&gt;&#39;package.json&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //配置uglify的支持&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uglify:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //uglify的更多配置查看官网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //这里的pkg 就是上面读取的package.json的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stripBanners:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //banner，压缩后显示的描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                banner: &lt;span class=&quot;string&quot;&gt;&#39;/*!  - v - */&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dest:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                src:&lt;span class=&quot;string&quot;&gt;&#39;src/test.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dest:&lt;span class=&quot;string&quot;&gt;&#39;dest/-.min.js&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //这里加载所需要的插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在这里加入grunt的任务，就是在cmd下输入grunt后，grunt要执行的东西。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //这里根据任务的先后顺序执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了现在配置完毕了，接着在cmd,中键入grunt试试看，结果：&lt;br&gt;&lt;br&gt;这个时候dest目录就会输出一个js文件&lt;br&gt;内容如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*! grunttest - v1.0.0 -2016-02-18 */!&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(a)&amp;#123;var b=1;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; b&amp;#125;(window);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;js代码语法检查（contrib-jshint）&quot;&gt;&lt;a href=&quot;#js代码语法检查（contrib-jshint）&quot; class=&quot;headerlink&quot; title=&quot;js代码语法检查（contrib-jshint）&quot;&gt;&lt;/a&gt;js代码语法检查（contrib-jshint）&lt;/h4&gt;&lt;p&gt;这个插件主要是实现代码的语法的检查，我们来实践一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-contrib-jshint --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样安装完成以后package.json的Devpendencies会多一个”grunt-contrib-jshint”的信息，跟安装uglify一样需要配置Gruntfile.js，的grunt.initConfig&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jshint:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //jshint的更多配置查看官网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //配置语法检查的规则，保存在.jshintrc文件，下面配置文件在网站根目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                jshintrc:&lt;span class=&quot;string&quot;&gt;&#39;.jshintrc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dest:[&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以及在配置中加入任务：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&#39;grunt-contrib-jshint&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//注意这个顺序，我们是先进行语法的检查在压缩。如果语法检查失败了是不会执行往后的任务的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;jshint&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在跟目录下新建一个.jshintrc文件，填写规则：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //未定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;undef&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //未使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;unused&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //缺少分号警告&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;asi&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;boss&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //忽略debugger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;debug&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //检查一行代码最后声明后面的分号是否遗漏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;lastsemic&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //检查不安全的折行，忽略逗号在最前面的编程风格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;laxcomma&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //预定义一些全局的变量,如window,如果不配置这个选项，则js文件使用window会提示未定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;browser&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //定义用于调试的全局变量，如：console,aldert.如果不配置同样会提示未定义。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devel&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一些规则可以自行添加，配置完成后可以grunt查看效果：&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/9.png&quot; alt=&quot;9.png&quot; title=&quot;&quot;&gt;&lt;br&gt;提示win未使用,这个就是语法的检查，如果每次修改了文件都要grunt来操作检查和压缩混淆，还是很麻烦的，能不能按下保存以后自动就做实现代码的检查和压缩呢？这个是可以的需要安装watch插件。&lt;/p&gt;
&lt;h4 id=&quot;自动化（contrib-watch）&quot;&gt;&lt;a href=&quot;#自动化（contrib-watch）&quot; class=&quot;headerlink&quot; title=&quot;自动化（contrib-watch）&quot;&gt;&lt;/a&gt;自动化（contrib-watch）&lt;/h4&gt;&lt;p&gt;这个插件主要是实现自动化执行，我们来实践一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-contrib-watch --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样安装完成以后package.json的Devpendencies会多一个”grunt-contrib-watch”的信息，一样需要配置Gruntfile.js，的grunt.initConfig&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;watch:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           //配置节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           js:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               files:&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;,//监控的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               tasks:[&lt;span class=&quot;string&quot;&gt;&#39;jshint&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;],//执行的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               //选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   //是否开启子进程处理，一般为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;可能导致不稳定。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   spawn:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           css:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               files:&lt;span class=&quot;string&quot;&gt;&#39;src/*.css&#39;&lt;/span&gt;,//监控的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               tasks:[&lt;span class=&quot;string&quot;&gt;&#39;jshint&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;],//执行的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               //选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   //是否开启子进程处理，一般为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;可能导致不稳定。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   spawn:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上配置是把文件文类处理，因为css变化和js变化需要的操作可能不同，如果操作一样可以合并为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;watch:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //配置节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   files:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   files:[&lt;span class=&quot;string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;src/*.css&#39;&lt;/span&gt;],//监控的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tasks:[&lt;span class=&quot;string&quot;&gt;&#39;jshint&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;],//执行的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   options:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //是否开启子进程处理，一般为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;可能导致不稳定。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spawn:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（其中节点的配置名字可以任意取的，不是固定的，uglify的dest也是可以任意取的，还有jshint的dest也一样）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后一样添加任务。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&quot;grunt-contrib-uglify&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&#39;grunt-contrib-jshint&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&#39;grunt-contrib-watch&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     //注意这个顺序，我们是先进行语法的检查在压缩。如果语法检查失败了是不会执行往后的任务的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;jshint&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;uglify&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;watch&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置完成后可以grunt查看效果：&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/10.png&quot; alt=&quot;10.png&quot; title=&quot;&quot;&gt;&lt;br&gt;这个时候修改test.js，然后crtl+s一下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(win)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(win);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var total=1+c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(window)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再看cmd，会出现&lt;br&gt;&lt;img src=&quot;/2016/03/22/grunt基础安装篇/11.png&quot; alt=&quot;11.png&quot; title=&quot;&quot;&gt;&lt;br&gt;提示c变量未定义。这样就实现了自动化的监控当我们把代码修改以后再保存，这个监控程序也会同步,就是这样太棒了。。。  &lt;/p&gt;
&lt;p&gt;有些时候我们写css,会使用less,或者sass,那么grunt有没有相关的插件呢？答案是有的grunt-compass、grunt-autoprefixer。  &lt;/p&gt;
&lt;h4 id=&quot;编译sass、自动修补属性（grunt-compass-grunt-autoprefixer）&quot;&gt;&lt;a href=&quot;#编译sass、自动修补属性（grunt-compass-grunt-autoprefixer）&quot; class=&quot;headerlink&quot; title=&quot;编译sass、自动修补属性（grunt-compass,grunt-autoprefixer）&quot;&gt;&lt;/a&gt;编译sass、自动修补属性（grunt-compass,grunt-autoprefixer）&lt;/h4&gt;&lt;p&gt;安装过程&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-compass --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install grunt-autoprefixer --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Gruntfile.js配置&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compass: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dev: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      options: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sassDir: [&lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cssDir: [&lt;span class=&quot;string&quot;&gt;&#39;dest&#39;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        environment:production&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  autoprefixer: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 文件设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    single_file: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      src: &lt;span class=&quot;string&quot;&gt;&#39;dest/test.css&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dest: &lt;span class=&quot;string&quot;&gt;&#39;dest/test.autoprefixer.css&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;流程是先compass.变成css文件，再对文件进行autoprefixer.还可以再安装一个grunt-contrib-cssmin,对css进行压缩。  &lt;/p&gt;
&lt;p&gt;如果团队协作开发，是否要将插件上传到代码管理器（git. svn等）上呢？    &lt;/p&gt;
&lt;p&gt;答案是不需要的，我们只需要传package.json文件,别人只需要按照文件中的devDependencies的插件信息来安装对应的插件即可。&lt;br&gt;那么问题来了，难道要一个一个插件的安装?有没有快捷的方法呢。当然是有的。      例如要把上面的grunttest使用的插件安装到test2.只需要把package.json拷贝到test2的目录，  然后npm install 奇迹就会发生,同样插件同样的版本,就是这么简单。  &lt;/p&gt;
&lt;p&gt;（完）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;win-环境下-grunt-安装使用纪要&quot;&gt;&lt;a href=&quot;#win-环境下-grunt-安装使用纪要&quot; class=&quot;headerlink&quot; title=&quot;win 环境下 grunt 安装使用纪要&quot;&gt;&lt;/a&gt;win 环境下 grunt 安装使用纪要&lt;/h3&gt;&lt;p&gt;grunt是一款前端自动化的神器，今天记录一下使用的方法。&lt;br&gt;首先要清楚的是grunt是基于nodejs为前提的一个插件，所以如果没有安装nodejs.可以先下载安装。&lt;br&gt;这里假设已经安装完了nodejs,然后我们打开nodejs的命令行程序（记得要使用管理员的权限运行），下面开始安装grunt.  &lt;/p&gt;
&lt;h3 id=&quot;安装grunt的命令行插件grunt-cli&quot;&gt;&lt;a href=&quot;#安装grunt的命令行插件grunt-cli&quot; class=&quot;headerlink&quot; title=&quot;安装grunt的命令行插件grunt-cli&quot;&gt;&lt;/a&gt;安装grunt的命令行插件grunt-cli&lt;/h3&gt;&lt;p&gt;安装时候使用-g参数进行全局的安装，把插件安装到全局的环境中(npm get prefix 查看全局环境的路径)。  在nodejs cmd 里面输入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g  grunt-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装完成后在cmd里输入：grunt 会出现如下的提示，说明grunt-cli安装成功了。&lt;br&gt;
    
    </summary>
    
      <category term="grunt" scheme="http://yoursite.com/categories/grunt/"/>
    
    
      <category term="grunt" scheme="http://yoursite.com/tags/grunt/"/>
    
      <category term="grunt插件" scheme="http://yoursite.com/tags/grunt%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
